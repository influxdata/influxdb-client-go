// Code generated for client DO NOT EDIT.
// TODO(docmerlin): modify generator so we don't need to edit the generated code.
// The generated code is modified to remove external dependencies and the GetSwagger function is removed.// Package genclient provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package genclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

// ASTResponse defines component schema for ASTResponse.
type ASTResponse struct {
	Ast *Package `json:"ast,omitempty"`
}

// AddResourceMemberRequestBody defines component schema for AddResourceMemberRequestBody.
type AddResourceMemberRequestBody struct {
	Id   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// AnalyzeQueryResponse defines component schema for AnalyzeQueryResponse.
type AnalyzeQueryResponse struct {
	Errors []struct {
		Character *int32  `json:"character,omitempty"`
		Column    *int32  `json:"column,omitempty"`
		Line      *int32  `json:"line,omitempty"`
		Message   *string `json:"message,omitempty"`
	} `json:"errors,omitempty"`
}

// ArrayExpression defines component schema for ArrayExpression.
type ArrayExpression struct {
	Elements []interface{} `json:"elements,omitempty"`
	Type     *NodeType     `json:"type,omitempty"`
}

// Authorization defines component schema for Authorization.
type Authorization struct {
	// Embedded struct due to allOf(#/components/schemas/AuthorizationUpdateRequest)
	AuthorizationUpdateRequest
	// Embedded fields due to inline allOf schema
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Self *string `json:"self,omitempty"`
		User *string `json:"user,omitempty"`
	} `json:"links,omitempty"`
	Org         *string      `json:"org,omitempty"`
	OrgID       *string      `json:"orgID,omitempty"`
	Permissions []Permission `json:"permissions,omitempty"`
	Token       *string      `json:"token,omitempty"`
	User        *string      `json:"user,omitempty"`
	UserID      *string      `json:"userID,omitempty"`
}

// AuthorizationUpdateRequest defines component schema for AuthorizationUpdateRequest.
type AuthorizationUpdateRequest struct {
	Description *string `json:"description,omitempty"`
	Status      *string `json:"status,omitempty"`
}

// Authorizations defines component schema for Authorizations.
type Authorizations struct {
	Authorizations []struct {
		// Embedded struct due to allOf(#/components/schemas/AuthorizationUpdateRequest)
		AuthorizationUpdateRequest
		// Embedded fields due to inline allOf schema
		Id    *string `json:"id,omitempty"`
		Links *struct {
			Self *string `json:"self,omitempty"`
			User *string `json:"user,omitempty"`
		} `json:"links,omitempty"`
		Org         *string      `json:"org,omitempty"`
		OrgID       *string      `json:"orgID,omitempty"`
		Permissions []Permission `json:"permissions,omitempty"`
		Token       *string      `json:"token,omitempty"`
		User        *string      `json:"user,omitempty"`
		UserID      *string      `json:"userID,omitempty"`
	} `json:"authorizations,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Axes defines component schema for Axes.
type Axes struct {
	X  *Axis `json:"x,omitempty"`
	Y  *Axis `json:"y,omitempty"`
	Y2 *Axis `json:"y2,omitempty"`
}

// Axis defines component schema for Axis.
type Axis struct {
	Base   *string `json:"base,omitempty"`
	Bounds []int64 `json:"bounds,omitempty"`
	Label  *string `json:"label,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	Scale  *string `json:"scale,omitempty"`
	Suffix *string `json:"suffix,omitempty"`
}

// BadStatement defines component schema for BadStatement.
type BadStatement struct {
	Text *string   `json:"text,omitempty"`
	Type *NodeType `json:"type,omitempty"`
}

// BinaryExpression defines component schema for BinaryExpression.
type BinaryExpression struct {
	Left     interface{} `json:"left,omitempty"`
	Operator *string     `json:"operator,omitempty"`
	Right    interface{} `json:"right,omitempty"`
	Type     *NodeType   `json:"type,omitempty"`
}

// Block defines component schema for Block.
type Block struct {
	Body []interface{} `json:"body,omitempty"`
	Type *NodeType     `json:"type,omitempty"`
}

// BooleanLiteral defines component schema for BooleanLiteral.
type BooleanLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *bool     `json:"value,omitempty"`
}

// Bucket defines component schema for Bucket.
type Bucket struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Labels      *Labels    `json:"labels,omitempty"`
	Links       *struct {
		Labels  *Link `json:"labels,omitempty"`
		Logs    *Link `json:"logs,omitempty"`
		Members *Link `json:"members,omitempty"`
		Org     *Link `json:"org,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Self    *Link `json:"self,omitempty"`
		Write   *Link `json:"write,omitempty"`
	} `json:"links,omitempty"`
	Name           string  `json:"name"`
	OrgID          *string `json:"orgID,omitempty"`
	RetentionRules []struct {
		EverySeconds int32  `json:"everySeconds"`
		Type         string `json:"type"`
	} `json:"retentionRules"`
	Rp        *string    `json:"rp,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Buckets defines component schema for Buckets.
type Buckets struct {
	Buckets []Bucket `json:"buckets,omitempty"`
	Links   *Links   `json:"links,omitempty"`
}

// BuiltinStatement defines component schema for BuiltinStatement.
type BuiltinStatement struct {
	Id   *Identifier `json:"id,omitempty"`
	Type *NodeType   `json:"type,omitempty"`
}

// CallExpression defines component schema for CallExpression.
type CallExpression struct {
	Arguments []interface{} `json:"arguments,omitempty"`
	Callee    interface{}   `json:"callee,omitempty"`
	Type      *NodeType     `json:"type,omitempty"`
}

// Cell defines component schema for Cell.
type Cell struct {
	H     *int32  `json:"h,omitempty"`
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Self *string `json:"self,omitempty"`
		View *string `json:"view,omitempty"`
	} `json:"links,omitempty"`
	ViewID *string `json:"viewID,omitempty"`
	W      *int32  `json:"w,omitempty"`
	X      *int32  `json:"x,omitempty"`
	Y      *int32  `json:"y,omitempty"`
}

// CellUpdate defines component schema for CellUpdate.
type CellUpdate struct {
	H *int32 `json:"h,omitempty"`
	W *int32 `json:"w,omitempty"`
	X *int32 `json:"x,omitempty"`
	Y *int32 `json:"y,omitempty"`
}

// Cells defines component schema for Cells.
type Cells []Cell

// Check defines component schema for Check.
type Check struct {
	Checks  []Check `json:"checks,omitempty"`
	Message *string `json:"message,omitempty"`
	Name    string  `json:"name"`
	Status  string  `json:"status"`
}

// ConditionalExpression defines component schema for ConditionalExpression.
type ConditionalExpression struct {
	Alternate  interface{} `json:"alternate,omitempty"`
	Consequent interface{} `json:"consequent,omitempty"`
	Test       interface{} `json:"test,omitempty"`
	Type       *NodeType   `json:"type,omitempty"`
}

// ConstantVariableProperties defines component schema for ConstantVariableProperties.
type ConstantVariableProperties struct {
	Type   *string  `json:"type,omitempty"`
	Values []string `json:"values,omitempty"`
}

// CreateCell defines component schema for CreateCell.
type CreateCell struct {
	H         *int32  `json:"h,omitempty"`
	Name      *string `json:"name,omitempty"`
	UsingView *string `json:"usingView,omitempty"`
	W         *int32  `json:"w,omitempty"`
	X         *int32  `json:"x,omitempty"`
	Y         *int32  `json:"y,omitempty"`
}

// CreateDashboardRequest defines component schema for CreateDashboardRequest.
type CreateDashboardRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	OrgID       string  `json:"orgID"`
}

// Dashboard defines component schema for Dashboard.
type Dashboard struct {
	// Embedded struct due to allOf(#/components/schemas/CreateDashboardRequest)
	CreateDashboardRequest
	// Embedded fields due to inline allOf schema
	Cells  *Cells  `json:"cells,omitempty"`
	Id     *string `json:"id,omitempty"`
	Labels *Labels `json:"labels,omitempty"`
	Links  *struct {
		Cells   *Link `json:"cells,omitempty"`
		Labels  *Link `json:"labels,omitempty"`
		Logs    *Link `json:"logs,omitempty"`
		Members *Link `json:"members,omitempty"`
		Org     *Link `json:"org,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Self    *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Meta *struct {
		CreatedAt *time.Time `json:"createdAt,omitempty"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"meta,omitempty"`
}

// DashboardColor defines component schema for DashboardColor.
type DashboardColor struct {
	Hex   *string `json:"hex,omitempty"`
	Id    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// DashboardQuery defines component schema for DashboardQuery.
type DashboardQuery struct {
	Label       *string      `json:"label,omitempty"`
	Query       string       `json:"query"`
	QueryConfig *QueryConfig `json:"queryConfig,omitempty"`
	Range       *struct {
		Lower int64 `json:"lower"`
		Upper int64 `json:"upper"`
	} `json:"range,omitempty"`
	Source *string `json:"source,omitempty"`
}

// Dashboards defines component schema for Dashboards.
type Dashboards struct {
	Dashboards []struct {
		// Embedded struct due to allOf(#/components/schemas/CreateDashboardRequest)
		CreateDashboardRequest
		// Embedded fields due to inline allOf schema
		Cells  *Cells  `json:"cells,omitempty"`
		Id     *string `json:"id,omitempty"`
		Labels *Labels `json:"labels,omitempty"`
		Links  *struct {
			Cells   *Link `json:"cells,omitempty"`
			Labels  *Link `json:"labels,omitempty"`
			Logs    *Link `json:"logs,omitempty"`
			Members *Link `json:"members,omitempty"`
			Org     *Link `json:"org,omitempty"`
			Owners  *Link `json:"owners,omitempty"`
			Self    *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Meta *struct {
			CreatedAt *time.Time `json:"createdAt,omitempty"`
			UpdatedAt *time.Time `json:"updatedAt,omitempty"`
		} `json:"meta,omitempty"`
	} `json:"dashboards,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// DateTimeLiteral defines component schema for DateTimeLiteral.
type DateTimeLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *string   `json:"value,omitempty"`
}

// DecimalPlaces defines component schema for DecimalPlaces.
type DecimalPlaces struct {
	Digits     *int32 `json:"digits,omitempty"`
	IsEnforced *bool  `json:"isEnforced,omitempty"`
}

// Dialect defines component schema for Dialect.
type Dialect struct {
	Annotations    []string `json:"annotations,omitempty"`
	CommentPrefix  *string  `json:"commentPrefix,omitempty"`
	DateTimeFormat *string  `json:"dateTimeFormat,omitempty"`
	Delimiter      *string  `json:"delimiter,omitempty"`
	Header         *bool    `json:"header,omitempty"`
}

// Document defines component schema for Document.
type Document struct {
	Content map[string]interface{} `json:"content"`
	Id      string                 `json:"id"`
	Labels  *Labels                `json:"labels,omitempty"`
	Links   *struct {
		Self *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Meta DocumentMeta `json:"meta"`
}

// DocumentCreate defines component schema for DocumentCreate.
type DocumentCreate struct {
	Content map[string]interface{} `json:"content"`
	Labels  []string               `json:"labels,omitempty"`
	Meta    DocumentMeta           `json:"meta"`
	Org     *string                `json:"org,omitempty"`
	OrgID   *string                `json:"orgID,omitempty"`
}

// DocumentListEntry defines component schema for DocumentListEntry.
type DocumentListEntry struct {
	Id     string  `json:"id"`
	Labels *Labels `json:"labels,omitempty"`
	Links  *struct {
		Self *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Meta DocumentMeta `json:"meta"`
}

// DocumentMeta defines component schema for DocumentMeta.
type DocumentMeta struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Name        string     `json:"name"`
	Type        *string    `json:"type,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
	Version     string     `json:"version"`
}

// DocumentUpdate defines component schema for DocumentUpdate.
type DocumentUpdate struct {
	Content *map[string]interface{} `json:"content,omitempty"`
	Meta    *DocumentMeta           `json:"meta,omitempty"`
}

// Documents defines component schema for Documents.
type Documents struct {
	Documents []DocumentListEntry `json:"documents,omitempty"`
}

// Duration defines component schema for Duration.
type Duration struct {
	Magnitude *int32    `json:"magnitude,omitempty"`
	Type      *NodeType `json:"type,omitempty"`
	Unit      *string   `json:"unit,omitempty"`
}

// DurationLiteral defines component schema for DurationLiteral.
type DurationLiteral struct {
	Type   *NodeType  `json:"type,omitempty"`
	Values []Duration `json:"values,omitempty"`
}

// EmptyViewProperties defines component schema for EmptyViewProperties.
type EmptyViewProperties struct {
	Type *string `json:"type,omitempty"`
}

// Error defines component schema for Error.
type Error struct {
	Code    string  `json:"code"`
	Err     *string `json:"err,omitempty"`
	Message string  `json:"message"`
	Op      *string `json:"op,omitempty"`
}

// Expression defines component schema for Expression.
type Expression interface{}

// ExpressionStatement defines component schema for ExpressionStatement.
type ExpressionStatement struct {
	Expression interface{} `json:"expression,omitempty"`
	Type       *NodeType   `json:"type,omitempty"`
}

// Field defines component schema for Field.
type Field struct {
	Alias *string `json:"alias,omitempty"`
	Args  []Field `json:"args,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// File defines component schema for File.
type File struct {
	Body    []interface{}       `json:"body,omitempty"`
	Imports []ImportDeclaration `json:"imports,omitempty"`
	Name    *string             `json:"name,omitempty"`
	Package *PackageClause      `json:"package,omitempty"`
	Type    *NodeType           `json:"type,omitempty"`
}

// FloatLiteral defines component schema for FloatLiteral.
type FloatLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *float32  `json:"value,omitempty"`
}

// FluxSuggestions defines component schema for FluxSuggestions.
type FluxSuggestions struct {
	Funcs *struct {
		Name   *string                 `json:"name,omitempty"`
		Params *map[string]interface{} `json:"params,omitempty"`
	} `json:"funcs,omitempty"`
}

// FunctionExpression defines component schema for FunctionExpression.
type FunctionExpression struct {
	Body   interface{} `json:"body,omitempty"`
	Params []Property  `json:"params,omitempty"`
	Type   *NodeType   `json:"type,omitempty"`
}

// GaugeViewProperties defines component schema for GaugeViewProperties.
type GaugeViewProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	DecimalPlaces *DecimalPlaces `json:"decimalPlaces,omitempty"`
	Legend        *Legend        `json:"legend,omitempty"`
	Prefix        *string        `json:"prefix,omitempty"`
	Suffix        *string        `json:"suffix,omitempty"`
	Type          *string        `json:"type,omitempty"`
}

// HistogramViewProperties defines component schema for HistogramViewProperties.
type HistogramViewProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	BinCount    *int32    `json:"binCount,omitempty"`
	FillColumns []string  `json:"fillColumns,omitempty"`
	Position    *string   `json:"position,omitempty"`
	Type        *string   `json:"type,omitempty"`
	XAxisLabel  *string   `json:"xAxisLabel,omitempty"`
	XColumn     *string   `json:"xColumn,omitempty"`
	XDomain     []float32 `json:"xDomain,omitempty"`
}

// Identifier defines component schema for Identifier.
type Identifier struct {
	Name *string   `json:"name,omitempty"`
	Type *NodeType `json:"type,omitempty"`
}

// ImportDeclaration defines component schema for ImportDeclaration.
type ImportDeclaration struct {
	As   *Identifier    `json:"as,omitempty"`
	Path *StringLiteral `json:"path,omitempty"`
	Type *NodeType      `json:"type,omitempty"`
}

// IndexExpression defines component schema for IndexExpression.
type IndexExpression struct {
	Array interface{} `json:"array,omitempty"`
	Index interface{} `json:"index,omitempty"`
	Type  *NodeType   `json:"type,omitempty"`
}

// IntegerLiteral defines component schema for IntegerLiteral.
type IntegerLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *string   `json:"value,omitempty"`
}

// IsOnboarding defines component schema for IsOnboarding.
type IsOnboarding struct {
	Allowed *bool `json:"allowed,omitempty"`
}

// Label defines component schema for Label.
type Label struct {
	Id         *string                 `json:"id,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	OrgID      *string                 `json:"orgID,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
}

// LabelCreateRequest defines component schema for LabelCreateRequest.
type LabelCreateRequest struct {
	Name       *string                 `json:"name,omitempty"`
	OrgID      string                  `json:"orgID"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
}

// LabelMapping defines component schema for LabelMapping.
type LabelMapping struct {
	LabelID *string `json:"labelID,omitempty"`
}

// LabelResponse defines component schema for LabelResponse.
type LabelResponse struct {
	Label *Label `json:"label,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// LabelUpdate defines component schema for LabelUpdate.
type LabelUpdate struct {
	Name       *string                 `json:"name,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
}

// Labels defines component schema for Labels.
type Labels []Label

// LabelsResponse defines component schema for LabelsResponse.
type LabelsResponse struct {
	Labels *Labels `json:"labels,omitempty"`
	Links  *Links  `json:"links,omitempty"`
}

// LanguageRequest defines component schema for LanguageRequest.
type LanguageRequest struct {
	Query string `json:"query"`
}

// Legend defines component schema for Legend.
type Legend struct {
	Orientation *string `json:"orientation,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// LinePlusSingleStatProperties defines component schema for LinePlusSingleStatProperties.
type LinePlusSingleStatProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	Axes          *Axes          `json:"axes,omitempty"`
	DecimalPlaces *DecimalPlaces `json:"decimalPlaces,omitempty"`
	Legend        *Legend        `json:"legend,omitempty"`
	Prefix        *string        `json:"prefix,omitempty"`
	Suffix        *string        `json:"suffix,omitempty"`
	Type          *string        `json:"type,omitempty"`
}

// LineProtocolError defines component schema for LineProtocolError.
type LineProtocolError struct {
	Code    string `json:"code"`
	Err     string `json:"err"`
	Line    *int32 `json:"line,omitempty"`
	Message string `json:"message"`
	Op      string `json:"op"`
}

// LineProtocolLengthError defines component schema for LineProtocolLengthError.
type LineProtocolLengthError struct {
	Code      string `json:"code"`
	MaxLength int32  `json:"maxLength"`
	Message   string `json:"message"`
}

// Link defines component schema for Link.
type Link string

// Links defines component schema for Links.
type Links struct {
	Next *Link `json:"next,omitempty"`
	Prev *Link `json:"prev,omitempty"`
	Self Link  `json:"self"`
}

// LogEvent defines component schema for LogEvent.
type LogEvent struct {
	Message *string    `json:"message,omitempty"`
	Time    *time.Time `json:"time,omitempty"`
}

// LogViewProperties defines component schema for LogViewProperties.
type LogViewProperties struct {
	Columns []LogViewerColumn `json:"columns"`
	Shape   string            `json:"shape"`
	Type    string            `json:"type"`
}

// LogViewerColumn defines component schema for LogViewerColumn.
type LogViewerColumn struct {
	Name     string `json:"name"`
	Position int32  `json:"position"`
	Settings []struct {
		Name  *string `json:"name,omitempty"`
		Type  string  `json:"type"`
		Value string  `json:"value"`
	} `json:"settings"`
}

// LogicalExpression defines component schema for LogicalExpression.
type LogicalExpression struct {
	Left     interface{} `json:"left,omitempty"`
	Operator *string     `json:"operator,omitempty"`
	Right    interface{} `json:"right,omitempty"`
	Type     *NodeType   `json:"type,omitempty"`
}

// Logs defines component schema for Logs.
type Logs struct {
	Events []LogEvent `json:"events,omitempty"`
}

// MapVariableProperties defines component schema for MapVariableProperties.
type MapVariableProperties struct {
	Type   *string                 `json:"type,omitempty"`
	Values *map[string]interface{} `json:"values,omitempty"`
}

// MarkdownViewProperties defines component schema for MarkdownViewProperties.
type MarkdownViewProperties struct {
	Note *string `json:"note,omitempty"`
	Type *string `json:"type,omitempty"`
}

// MemberAssignment defines component schema for MemberAssignment.
type MemberAssignment struct {
	Init   interface{}       `json:"init,omitempty"`
	Member *MemberExpression `json:"member,omitempty"`
	Type   *NodeType         `json:"type,omitempty"`
}

// MemberExpression defines component schema for MemberExpression.
type MemberExpression struct {
	Object   interface{} `json:"object,omitempty"`
	Property interface{} `json:"property,omitempty"`
	Type     *NodeType   `json:"type,omitempty"`
}

// Node defines component schema for Node.
type Node interface{}

// NodeType defines component schema for NodeType.
type NodeType string

// ObjectExpression defines component schema for ObjectExpression.
type ObjectExpression struct {
	Properties []Property `json:"properties,omitempty"`
	Type       *NodeType  `json:"type,omitempty"`
}

// OnboardingRequest defines component schema for OnboardingRequest.
type OnboardingRequest struct {
	Bucket             string `json:"bucket"`
	Org                string `json:"org"`
	Password           string `json:"password"`
	RetentionPeriodHrs *int32 `json:"retentionPeriodHrs,omitempty"`
	Username           string `json:"username"`
}

// OnboardingResponse defines component schema for OnboardingResponse.
type OnboardingResponse struct {
	Auth struct {
		// Embedded struct due to allOf(#/components/schemas/AuthorizationUpdateRequest)
		AuthorizationUpdateRequest
		// Embedded fields due to inline allOf schema
		Id    *string `json:"id,omitempty"`
		Links *struct {
			Self *string `json:"self,omitempty"`
			User *string `json:"user,omitempty"`
		} `json:"links,omitempty"`
		Org         *string      `json:"org,omitempty"`
		OrgID       *string      `json:"orgID,omitempty"`
		Permissions []Permission `json:"permissions,omitempty"`
		Token       *string      `json:"token,omitempty"`
		User        *string      `json:"user,omitempty"`
		UserID      *string      `json:"userID,omitempty"`
	} `json:"auth,omitempty"`
	Bucket *Bucket       `json:"bucket,omitempty"`
	Org    *Organization `json:"org,omitempty"`
	User   *User         `json:"user,omitempty"`
}

// OperationLog defines component schema for OperationLog.
type OperationLog struct {
	Description *string `json:"description,omitempty"`
	Links       *struct {
		User *Link `json:"user,omitempty"`
	} `json:"links,omitempty"`
	Time   *time.Time `json:"time,omitempty"`
	UserID *string    `json:"userID,omitempty"`
}

// OperationLogs defines component schema for OperationLogs.
type OperationLogs struct {
	Links *Links         `json:"links,omitempty"`
	Logs  []OperationLog `json:"logs,omitempty"`
}

// OptionStatement defines component schema for OptionStatement.
type OptionStatement struct {
	Assignment interface{} `json:"assignment,omitempty"`
	Type       *NodeType   `json:"type,omitempty"`
}

// Organization defines component schema for Organization.
type Organization struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Links       *struct {
		Buckets    *Link `json:"buckets,omitempty"`
		Dashboards *Link `json:"dashboards,omitempty"`
		Labels     *Link `json:"labels,omitempty"`
		Logs       *Link `json:"logs,omitempty"`
		Members    *Link `json:"members,omitempty"`
		Owners     *Link `json:"owners,omitempty"`
		Secrets    *Link `json:"secrets,omitempty"`
		Self       *Link `json:"self,omitempty"`
		Tasks      *Link `json:"tasks,omitempty"`
	} `json:"links,omitempty"`
	Name      string     `json:"name"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Organizations defines component schema for Organizations.
type Organizations struct {
	Links *Links         `json:"links,omitempty"`
	Orgs  []Organization `json:"orgs,omitempty"`
}

// Package defines component schema for Package.
type Package struct {
	Files   []File    `json:"files,omitempty"`
	Package *string   `json:"package,omitempty"`
	Path    *string   `json:"path,omitempty"`
	Type    *NodeType `json:"type,omitempty"`
}

// PackageClause defines component schema for PackageClause.
type PackageClause struct {
	Name *Identifier `json:"name,omitempty"`
	Type *NodeType   `json:"type,omitempty"`
}

// PasswordResetBody defines component schema for PasswordResetBody.
type PasswordResetBody struct {
	Password string `json:"password"`
}

// Permission defines component schema for Permission.
type Permission struct {
	Action   string `json:"action"`
	Resource struct {
		Id    *string `json:"id,omitempty"`
		Name  *string `json:"name,omitempty"`
		Org   *string `json:"org,omitempty"`
		OrgID *string `json:"orgID,omitempty"`
		Type  string  `json:"type"`
	} `json:"resource"`
}

// PipeExpression defines component schema for PipeExpression.
type PipeExpression struct {
	Argument interface{}     `json:"argument,omitempty"`
	Call     *CallExpression `json:"call,omitempty"`
	Type     *NodeType       `json:"type,omitempty"`
}

// PipeLiteral defines component schema for PipeLiteral.
type PipeLiteral struct {
	Type *NodeType `json:"type,omitempty"`
}

// Property defines component schema for Property.
type Property struct {
	Key   interface{} `json:"key,omitempty"`
	Type  *NodeType   `json:"type,omitempty"`
	Value interface{} `json:"value,omitempty"`
}

// PropertyKey defines component schema for PropertyKey.
type PropertyKey interface{}

// Query defines component schema for Query.
type Query struct {
	Cluster *string  `json:"cluster,omitempty"`
	Db      *string  `json:"db,omitempty"`
	Dialect *Dialect `json:"dialect,omitempty"`
	Extern  *File    `json:"extern,omitempty"`
	Query   string   `json:"query"`
	Rp      *string  `json:"rp,omitempty"`
	Type    *string  `json:"type,omitempty"`
}

// QueryConfig defines component schema for QueryConfig.
type QueryConfig struct {
	AreTagsAccepted bool    `json:"areTagsAccepted"`
	Database        string  `json:"database"`
	Fields          []Field `json:"fields"`
	GroupBy         struct {
		Tags []string `json:"tags"`
		Time string   `json:"time"`
	} `json:"groupBy"`
	Id          *string `json:"id,omitempty"`
	Measurement string  `json:"measurement"`
	Range       *struct {
		Lower string `json:"lower"`
		Upper string `json:"upper"`
	} `json:"range,omitempty"`
	RawText         *string                `json:"rawText,omitempty"`
	RetentionPolicy string                 `json:"retentionPolicy"`
	Tags            map[string]interface{} `json:"tags"`
}

// QueryVariableProperties defines component schema for QueryVariableProperties.
type QueryVariableProperties struct {
	Type   *string `json:"type,omitempty"`
	Values *struct {
		Language *string `json:"language,omitempty"`
		Query    *string `json:"query,omitempty"`
	} `json:"values,omitempty"`
}

// Ready defines component schema for Ready.
type Ready struct {
	Started *time.Time `json:"started,omitempty"`
	Status  *string    `json:"status,omitempty"`
	Up      *string    `json:"up,omitempty"`
}

// RegexpLiteral defines component schema for RegexpLiteral.
type RegexpLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *string   `json:"value,omitempty"`
}

// RenamableField defines component schema for RenamableField.
type RenamableField struct {
	DisplayName  *string `json:"displayName,omitempty"`
	InternalName *string `json:"internalName,omitempty"`
	Visible      *bool   `json:"visible,omitempty"`
}

// ResourceMember defines component schema for ResourceMember.
type ResourceMember struct {
	// Embedded struct due to allOf(#/components/schemas/User)
	User
	// Embedded fields due to inline allOf schema
	Role *string `json:"role,omitempty"`
}

// ResourceMembers defines component schema for ResourceMembers.
type ResourceMembers struct {
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Users []struct {
		// Embedded struct due to allOf(#/components/schemas/User)
		User
		// Embedded fields due to inline allOf schema
		Role *string `json:"role,omitempty"`
	} `json:"users,omitempty"`
}

// ResourceOwner defines component schema for ResourceOwner.
type ResourceOwner struct {
	// Embedded struct due to allOf(#/components/schemas/User)
	User
	// Embedded fields due to inline allOf schema
	Role *string `json:"role,omitempty"`
}

// ResourceOwners defines component schema for ResourceOwners.
type ResourceOwners struct {
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Users []struct {
		// Embedded struct due to allOf(#/components/schemas/User)
		User
		// Embedded fields due to inline allOf schema
		Role *string `json:"role,omitempty"`
	} `json:"users,omitempty"`
}

// ReturnStatement defines component schema for ReturnStatement.
type ReturnStatement struct {
	Argument interface{} `json:"argument,omitempty"`
	Type     *NodeType   `json:"type,omitempty"`
}

// Routes defines component schema for Routes.
type Routes struct {
	Authorizations *string `json:"authorizations,omitempty"`
	Buckets        *string `json:"buckets,omitempty"`
	Dashboards     *string `json:"dashboards,omitempty"`
	External       *struct {
		StatusFeed *string `json:"statusFeed,omitempty"`
	} `json:"external,omitempty"`
	Me    *string `json:"me,omitempty"`
	Orgs  *string `json:"orgs,omitempty"`
	Query *struct {
		Analyze     *string `json:"analyze,omitempty"`
		Ast         *string `json:"ast,omitempty"`
		Self        *string `json:"self,omitempty"`
		Suggestions *string `json:"suggestions,omitempty"`
	} `json:"query,omitempty"`
	Setup   *string `json:"setup,omitempty"`
	Signin  *string `json:"signin,omitempty"`
	Signout *string `json:"signout,omitempty"`
	Sources *string `json:"sources,omitempty"`
	System  *struct {
		Debug   *string `json:"debug,omitempty"`
		Health  *string `json:"health,omitempty"`
		Metrics *string `json:"metrics,omitempty"`
	} `json:"system,omitempty"`
	Tasks     *string `json:"tasks,omitempty"`
	Telegrafs *string `json:"telegrafs,omitempty"`
	Users     *string `json:"users,omitempty"`
	Variables *string `json:"variables,omitempty"`
	Write     *string `json:"write,omitempty"`
}

// Run defines component schema for Run.
type Run struct {
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	Id         *string    `json:"id,omitempty"`
	Links      *struct {
		Logs  *string `json:"logs,omitempty"`
		Retry *string `json:"retry,omitempty"`
		Self  *string `json:"self,omitempty"`
		Task  *string `json:"task,omitempty"`
	} `json:"links,omitempty"`
	Log []struct {
		Message *string `json:"message,omitempty"`
		Time    *string `json:"time,omitempty"`
	} `json:"log,omitempty"`
	RequestedAt  *time.Time `json:"requestedAt,omitempty"`
	ScheduledFor *time.Time `json:"scheduledFor,omitempty"`
	StartedAt    *time.Time `json:"startedAt,omitempty"`
	Status       *string    `json:"status,omitempty"`
	TaskID       *string    `json:"taskID,omitempty"`
}

// RunManually defines component schema for RunManually.
type RunManually struct {
	ScheduledFor *time.Time `json:"scheduledFor,omitempty"`
}

// Runs defines component schema for Runs.
type Runs struct {
	Links *Links `json:"links,omitempty"`
	Runs  []Run  `json:"runs,omitempty"`
}

// ScraperTargetRequest defines component schema for ScraperTargetRequest.
type ScraperTargetRequest struct {
	BucketID *string `json:"bucketID,omitempty"`
	Name     *string `json:"name,omitempty"`
	OrgID    *string `json:"orgID,omitempty"`
	Type     *string `json:"type,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// ScraperTargetResponse defines component schema for ScraperTargetResponse.
type ScraperTargetResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ScraperTargetRequest)
	ScraperTargetRequest
	// Embedded fields due to inline allOf schema
	Bucket *string `json:"bucket,omitempty"`
	Id     *string `json:"id,omitempty"`
	Links  *struct {
		Bucket       *Link `json:"bucket,omitempty"`
		Members      *Link `json:"members,omitempty"`
		Organization *Link `json:"organization,omitempty"`
		Owners       *Link `json:"owners,omitempty"`
		Self         *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Org *string `json:"org,omitempty"`
}

// ScraperTargetResponses defines component schema for ScraperTargetResponses.
type ScraperTargetResponses struct {
	Configurations []struct {
		// Embedded struct due to allOf(#/components/schemas/ScraperTargetRequest)
		ScraperTargetRequest
		// Embedded fields due to inline allOf schema
		Bucket *string `json:"bucket,omitempty"`
		Id     *string `json:"id,omitempty"`
		Links  *struct {
			Bucket       *Link `json:"bucket,omitempty"`
			Members      *Link `json:"members,omitempty"`
			Organization *Link `json:"organization,omitempty"`
			Owners       *Link `json:"owners,omitempty"`
			Self         *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
		Org *string `json:"org,omitempty"`
	} `json:"configurations,omitempty"`
}

// SecretKeys defines component schema for SecretKeys.
type SecretKeys struct {
	Secrets []string `json:"secrets,omitempty"`
}

// SecretKeysResponse defines component schema for SecretKeysResponse.
type SecretKeysResponse struct {
	// Embedded struct due to allOf(#/components/schemas/SecretKeys)
	SecretKeys
	// Embedded fields due to inline allOf schema
	Links *struct {
		Org  *string `json:"org,omitempty"`
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
}

// Secrets defines component schema for Secrets.
type Secrets interface{}

// SingleStatViewProperties defines component schema for SingleStatViewProperties.
type SingleStatViewProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	DecimalPlaces *DecimalPlaces `json:"decimalPlaces,omitempty"`
	Legend        *Legend        `json:"legend,omitempty"`
	Prefix        *string        `json:"prefix,omitempty"`
	Suffix        *string        `json:"suffix,omitempty"`
	Type          *string        `json:"type,omitempty"`
}

// Source defines component schema for Source.
type Source struct {
	Default            *bool    `json:"default,omitempty"`
	DefaultRP          *string  `json:"defaultRP,omitempty"`
	Id                 *string  `json:"id,omitempty"`
	InsecureSkipVerify *bool    `json:"insecureSkipVerify,omitempty"`
	Languages          []string `json:"languages,omitempty"`
	Links              *struct {
		Buckets *string `json:"buckets,omitempty"`
		Health  *string `json:"health,omitempty"`
		Query   *string `json:"query,omitempty"`
		Self    *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	MetaUrl      *string `json:"metaUrl,omitempty"`
	Name         *string `json:"name,omitempty"`
	OrgID        *string `json:"orgID,omitempty"`
	Password     *string `json:"password,omitempty"`
	SharedSecret *string `json:"sharedSecret,omitempty"`
	Telegraf     *string `json:"telegraf,omitempty"`
	Token        *string `json:"token,omitempty"`
	Type         *string `json:"type,omitempty"`
	Url          *string `json:"url,omitempty"`
	Username     *string `json:"username,omitempty"`
}

// Sources defines component schema for Sources.
type Sources struct {
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Sources []Source `json:"sources,omitempty"`
}

// Statement defines component schema for Statement.
type Statement interface{}

// StringLiteral defines component schema for StringLiteral.
type StringLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *string   `json:"value,omitempty"`
}

// TableViewProperties defines component schema for TableViewProperties.
type TableViewProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	DecimalPlaces *DecimalPlaces   `json:"decimalPlaces,omitempty"`
	FieldOptions  []RenamableField `json:"fieldOptions,omitempty"`
	TableOptions  *struct {
		FixFirstColumn   *bool           `json:"fixFirstColumn,omitempty"`
		SortBy           *RenamableField `json:"sortBy,omitempty"`
		VerticalTimeAxis *bool           `json:"verticalTimeAxis,omitempty"`
		Wrapping         *string         `json:"wrapping,omitempty"`
	} `json:"tableOptions,omitempty"`
	TimeFormat *string `json:"timeFormat,omitempty"`
	Type       *string `json:"type,omitempty"`
}

// Task defines component schema for Task.
type Task struct {
	AuthorizationID *string    `json:"authorizationID,omitempty"`
	CreatedAt       *time.Time `json:"createdAt,omitempty"`
	Cron            *string    `json:"cron,omitempty"`
	Description     *string    `json:"description,omitempty"`
	Every           *string    `json:"every,omitempty"`
	Flux            string     `json:"flux"`
	Id              string     `json:"id"`
	Labels          *Labels    `json:"labels,omitempty"`
	LatestCompleted *time.Time `json:"latestCompleted,omitempty"`
	Links           *struct {
		Labels  *Link `json:"labels,omitempty"`
		Logs    *Link `json:"logs,omitempty"`
		Members *Link `json:"members,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Runs    *Link `json:"runs,omitempty"`
		Self    *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name      string     `json:"name"`
	Offset    *string    `json:"offset,omitempty"`
	Org       *string    `json:"org,omitempty"`
	OrgID     string     `json:"orgID"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// TaskCreateRequest defines component schema for TaskCreateRequest.
type TaskCreateRequest struct {
	Flux   string  `json:"flux"`
	Org    *string `json:"org,omitempty"`
	OrgID  *string `json:"orgID,omitempty"`
	Status *string `json:"status,omitempty"`
	Token  *string `json:"token,omitempty"`
}

// TaskUpdateRequest defines component schema for TaskUpdateRequest.
type TaskUpdateRequest struct {
	Cron   *string `json:"cron,omitempty"`
	Every  *string `json:"every,omitempty"`
	Flux   *string `json:"flux,omitempty"`
	Name   *string `json:"name,omitempty"`
	Offset *string `json:"offset,omitempty"`
	Status *string `json:"status,omitempty"`
	Token  *string `json:"token,omitempty"`
}

// Tasks defines component schema for Tasks.
type Tasks struct {
	Links *Links `json:"links,omitempty"`
	Tasks []Task `json:"tasks,omitempty"`
}

// Telegraf defines component schema for Telegraf.
type Telegraf struct {
	// Embedded struct due to allOf(#/components/schemas/TelegrafRequest)
	TelegrafRequest
	// Embedded fields due to inline allOf schema
	Id     *string `json:"id,omitempty"`
	Labels *Labels `json:"labels,omitempty"`
	Links  *struct {
		Labels  *Link `json:"labels,omitempty"`
		Members *Link `json:"members,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Self    *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
}

// TelegrafPluginInputCpu defines component schema for TelegrafPluginInputCpu.
type TelegrafPluginInputCpu struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputDisk defines component schema for TelegrafPluginInputDisk.
type TelegrafPluginInputDisk struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputDiskio defines component schema for TelegrafPluginInputDiskio.
type TelegrafPluginInputDiskio struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputDocker defines component schema for TelegrafPluginInputDocker.
type TelegrafPluginInputDocker struct {
	Comment *string                         `json:"comment,omitempty"`
	Config  TelegrafPluginInputDockerConfig `json:"config"`
	Name    string                          `json:"name"`
	Type    string                          `json:"type"`
}

// TelegrafPluginInputDockerConfig defines component schema for TelegrafPluginInputDockerConfig.
type TelegrafPluginInputDockerConfig struct {
	Endpoint string `json:"endpoint"`
}

// TelegrafPluginInputFile defines component schema for TelegrafPluginInputFile.
type TelegrafPluginInputFile struct {
	Comment *string                       `json:"comment,omitempty"`
	Config  TelegrafPluginInputFileConfig `json:"config"`
	Name    string                        `json:"name"`
	Type    string                        `json:"type"`
}

// TelegrafPluginInputFileConfig defines component schema for TelegrafPluginInputFileConfig.
type TelegrafPluginInputFileConfig struct {
	Files []string `json:"files,omitempty"`
}

// TelegrafPluginInputKernel defines component schema for TelegrafPluginInputKernel.
type TelegrafPluginInputKernel struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputKubernetes defines component schema for TelegrafPluginInputKubernetes.
type TelegrafPluginInputKubernetes struct {
	Comment *string                             `json:"comment,omitempty"`
	Config  TelegrafPluginInputKubernetesConfig `json:"config"`
	Name    string                              `json:"name"`
	Type    string                              `json:"type"`
}

// TelegrafPluginInputKubernetesConfig defines component schema for TelegrafPluginInputKubernetesConfig.
type TelegrafPluginInputKubernetesConfig struct {
	Url *string `json:"url,omitempty"`
}

// TelegrafPluginInputLogParser defines component schema for TelegrafPluginInputLogParser.
type TelegrafPluginInputLogParser struct {
	Comment *string                            `json:"comment,omitempty"`
	Config  TelegrafPluginInputLogParserConfig `json:"config"`
	Name    string                             `json:"name"`
	Type    string                             `json:"type"`
}

// TelegrafPluginInputLogParserConfig defines component schema for TelegrafPluginInputLogParserConfig.
type TelegrafPluginInputLogParserConfig struct {
	Files []string `json:"files,omitempty"`
}

// TelegrafPluginInputMem defines component schema for TelegrafPluginInputMem.
type TelegrafPluginInputMem struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputNet defines component schema for TelegrafPluginInputNet.
type TelegrafPluginInputNet struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputNetResponse defines component schema for TelegrafPluginInputNetResponse.
type TelegrafPluginInputNetResponse struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputNginx defines component schema for TelegrafPluginInputNginx.
type TelegrafPluginInputNginx struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputProcesses defines component schema for TelegrafPluginInputProcesses.
type TelegrafPluginInputProcesses struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputProcstat defines component schema for TelegrafPluginInputProcstat.
type TelegrafPluginInputProcstat struct {
	Comment *string                           `json:"comment,omitempty"`
	Config  TelegrafPluginInputProcstatConfig `json:"config"`
	Name    string                            `json:"name"`
	Type    string                            `json:"type"`
}

// TelegrafPluginInputProcstatConfig defines component schema for TelegrafPluginInputProcstatConfig.
type TelegrafPluginInputProcstatConfig struct {
	Exe *string `json:"exe,omitempty"`
}

// TelegrafPluginInputPrometheus defines component schema for TelegrafPluginInputPrometheus.
type TelegrafPluginInputPrometheus struct {
	Comment *string                             `json:"comment,omitempty"`
	Config  TelegrafPluginInputPrometheusConfig `json:"config"`
	Name    string                              `json:"name"`
	Type    string                              `json:"type"`
}

// TelegrafPluginInputPrometheusConfig defines component schema for TelegrafPluginInputPrometheusConfig.
type TelegrafPluginInputPrometheusConfig struct {
	Urls []string `json:"urls,omitempty"`
}

// TelegrafPluginInputRedis defines component schema for TelegrafPluginInputRedis.
type TelegrafPluginInputRedis struct {
	Comment *string                        `json:"comment,omitempty"`
	Config  TelegrafPluginInputRedisConfig `json:"config"`
	Name    string                         `json:"name"`
	Type    string                         `json:"type"`
}

// TelegrafPluginInputRedisConfig defines component schema for TelegrafPluginInputRedisConfig.
type TelegrafPluginInputRedisConfig struct {
	Password *string  `json:"password,omitempty"`
	Servers  []string `json:"servers,omitempty"`
}

// TelegrafPluginInputSwap defines component schema for TelegrafPluginInputSwap.
type TelegrafPluginInputSwap struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputSyslog defines component schema for TelegrafPluginInputSyslog.
type TelegrafPluginInputSyslog struct {
	Comment *string                         `json:"comment,omitempty"`
	Config  TelegrafPluginInputSyslogConfig `json:"config"`
	Name    string                          `json:"name"`
	Type    string                          `json:"type"`
}

// TelegrafPluginInputSyslogConfig defines component schema for TelegrafPluginInputSyslogConfig.
type TelegrafPluginInputSyslogConfig struct {
	Server *string `json:"server,omitempty"`
}

// TelegrafPluginInputSystem defines component schema for TelegrafPluginInputSystem.
type TelegrafPluginInputSystem struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginInputTail defines component schema for TelegrafPluginInputTail.
type TelegrafPluginInputTail struct {
	Comment *string `json:"comment,omitempty"`
	Name    string  `json:"name"`
	Type    string  `json:"type"`
}

// TelegrafPluginOutputFile defines component schema for TelegrafPluginOutputFile.
type TelegrafPluginOutputFile struct {
	Comment *string                        `json:"comment,omitempty"`
	Config  TelegrafPluginOutputFileConfig `json:"config"`
	Name    string                         `json:"name"`
	Type    string                         `json:"type"`
}

// TelegrafPluginOutputFileConfig defines component schema for TelegrafPluginOutputFileConfig.
type TelegrafPluginOutputFileConfig struct {
	Files []struct {
		Path *string `json:"path,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"files"`
}

// TelegrafPluginOutputInfluxDBV2 defines component schema for TelegrafPluginOutputInfluxDBV2.
type TelegrafPluginOutputInfluxDBV2 struct {
	Comment *string                              `json:"comment,omitempty"`
	Config  TelegrafPluginOutputInfluxDBV2Config `json:"config"`
	Name    string                               `json:"name"`
	Type    string                               `json:"type"`
}

// TelegrafPluginOutputInfluxDBV2Config defines component schema for TelegrafPluginOutputInfluxDBV2Config.
type TelegrafPluginOutputInfluxDBV2Config struct {
	Bucket       string   `json:"bucket"`
	Organization string   `json:"organization"`
	Token        string   `json:"token"`
	Urls         []string `json:"urls"`
}

// TelegrafRequest defines component schema for TelegrafRequest.
type TelegrafRequest struct {
	Agent *struct {
		CollectionInterval *int32 `json:"collectionInterval,omitempty"`
	} `json:"agent,omitempty"`
	Description    *string       `json:"description,omitempty"`
	Name           *string       `json:"name,omitempty"`
	OrganizationID *string       `json:"organizationID,omitempty"`
	Plugins        []interface{} `json:"plugins,omitempty"`
}

// TelegrafRequestPlugin defines component schema for TelegrafRequestPlugin.
type TelegrafRequestPlugin interface{}

// Telegrafs defines component schema for Telegrafs.
type Telegrafs struct {
	Configurations []struct {
		// Embedded struct due to allOf(#/components/schemas/TelegrafRequest)
		TelegrafRequest
		// Embedded fields due to inline allOf schema
		Id     *string `json:"id,omitempty"`
		Labels *Labels `json:"labels,omitempty"`
		Links  *struct {
			Labels  *Link `json:"labels,omitempty"`
			Members *Link `json:"members,omitempty"`
			Owners  *Link `json:"owners,omitempty"`
			Self    *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
	} `json:"configurations,omitempty"`
}

// TestStatement defines component schema for TestStatement.
type TestStatement struct {
	Assignment *VariableAssignment `json:"assignment,omitempty"`
	Type       *NodeType           `json:"type,omitempty"`
}

// UnaryExpression defines component schema for UnaryExpression.
type UnaryExpression struct {
	Argument interface{} `json:"argument,omitempty"`
	Operator *string     `json:"operator,omitempty"`
	Type     *NodeType   `json:"type,omitempty"`
}

// UnsignedIntegerLiteral defines component schema for UnsignedIntegerLiteral.
type UnsignedIntegerLiteral struct {
	Type  *NodeType `json:"type,omitempty"`
	Value *string   `json:"value,omitempty"`
}

// User defines component schema for User.
type User struct {
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Logs *string `json:"logs,omitempty"`
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name   string  `json:"name"`
	Status *string `json:"status,omitempty"`
}

// Users defines component schema for Users.
type Users struct {
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Users []User `json:"users,omitempty"`
}

// Variable defines component schema for Variable.
type Variable struct {
	Arguments   interface{} `json:"arguments"`
	Description *string     `json:"description,omitempty"`
	Id          *string     `json:"id,omitempty"`
	Labels      *Labels     `json:"labels,omitempty"`
	Links       *struct {
		Labels *string `json:"labels,omitempty"`
		Org    *string `json:"org,omitempty"`
		Self   *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name     string   `json:"name"`
	OrgID    string   `json:"orgID"`
	Selected []string `json:"selected,omitempty"`
}

// VariableAssignment defines component schema for VariableAssignment.
type VariableAssignment struct {
	Id   *Identifier `json:"id,omitempty"`
	Init interface{} `json:"init,omitempty"`
	Type *NodeType   `json:"type,omitempty"`
}

// Variables defines component schema for Variables.
type Variables struct {
	Variables []Variable `json:"variables,omitempty"`
}

// View defines component schema for View.
type View struct {
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name       *string     `json:"name,omitempty"`
	Properties interface{} `json:"properties,omitempty"`
}

// ViewProperties defines component schema for ViewProperties.
type ViewProperties struct {
	Colors            []DashboardColor `json:"colors,omitempty"`
	Note              *string          `json:"note,omitempty"`
	Queries           []DashboardQuery `json:"queries,omitempty"`
	ShowNoteWhenEmpty *bool            `json:"showNoteWhenEmpty,omitempty"`
}

// Views defines component schema for Views.
type Views struct {
	Links *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Views []View `json:"views,omitempty"`
}

// WritePrecision defines component schema for WritePrecision.
type WritePrecision string

// XYViewProperties defines component schema for XYViewProperties.
type XYViewProperties struct {
	// Embedded struct due to allOf(#/components/schemas/ViewProperties)
	ViewProperties
	// Embedded fields due to inline allOf schema
	Axes   *Axes   `json:"axes,omitempty"`
	Geom   *string `json:"geom,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// Descending defines component parameter for "Descending"
type Descending bool

// Limit defines component parameter for "Limit"
type Limit int32

// Offset defines component parameter for "Offset"
type Offset int32

// SortBy defines component parameter for "SortBy"
type SortBy string

// TraceSpan defines component parameter for "TraceSpan"
type TraceSpan string

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetAuthorizationsParams defines parameters for GetAuthorizations.
type GetAuthorizationsParams struct {
	UserID       *string    `json:"userID,omitempty"`
	User         *string    `json:"user,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	Org          *string    `json:"org,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostAuthorizationsParams defines parameters for PostAuthorizations.
type PostAuthorizationsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteAuthorizationsIDParams defines parameters for DeleteAuthorizationsID.
type DeleteAuthorizationsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetAuthorizationsIDParams defines parameters for GetAuthorizationsID.
type GetAuthorizationsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchAuthorizationsIDParams defines parameters for PatchAuthorizationsID.
type PatchAuthorizationsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsParams defines parameters for GetBuckets.
type GetBucketsParams struct {
	Offset       *Offset    `json:"offset,omitempty"`
	Limit        *Limit     `json:"limit,omitempty"`
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	Name         *string    `json:"name,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostBucketsParams defines parameters for PostBuckets.
type PostBucketsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteBucketsIDParams defines parameters for DeleteBucketsID.
type DeleteBucketsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsIDParams defines parameters for GetBucketsID.
type GetBucketsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchBucketsIDParams defines parameters for PatchBucketsID.
type PatchBucketsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsIDLabelsParams defines parameters for GetBucketsIDLabels.
type GetBucketsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostBucketsIDLabelsParams defines parameters for PostBucketsIDLabels.
type PostBucketsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteBucketsIDLabelsIDParams defines parameters for DeleteBucketsIDLabelsID.
type DeleteBucketsIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsIDLogsParams defines parameters for GetBucketsIDLogs.
type GetBucketsIDLogsParams struct {
	Offset       *Offset    `json:"offset,omitempty"`
	Limit        *Limit     `json:"limit,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsIDMembersParams defines parameters for GetBucketsIDMembers.
type GetBucketsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostBucketsIDMembersParams defines parameters for PostBucketsIDMembers.
type PostBucketsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteBucketsIDMembersIDParams defines parameters for DeleteBucketsIDMembersID.
type DeleteBucketsIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetBucketsIDOwnersParams defines parameters for GetBucketsIDOwners.
type GetBucketsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostBucketsIDOwnersParams defines parameters for PostBucketsIDOwners.
type PostBucketsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteBucketsIDOwnersIDParams defines parameters for DeleteBucketsIDOwnersID.
type DeleteBucketsIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsParams defines parameters for GetDashboards.
type GetDashboardsParams struct {
	Owner        *string    `json:"owner,omitempty"`
	SortBy       *string    `json:"sortBy,omitempty"`
	Id           *[]string  `json:"id,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	Org          *string    `json:"org,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDashboardsParams defines parameters for PostDashboards.
type PostDashboardsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDashboardsIDParams defines parameters for DeleteDashboardsID.
type DeleteDashboardsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDParams defines parameters for GetDashboardsID.
type GetDashboardsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchDashboardsIDParams defines parameters for PatchDashboardsID.
type PatchDashboardsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDashboardsIDCellsParams defines parameters for PostDashboardsIDCells.
type PostDashboardsIDCellsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PutDashboardsIDCellsParams defines parameters for PutDashboardsIDCells.
type PutDashboardsIDCellsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDashboardsIDCellsIDParams defines parameters for DeleteDashboardsIDCellsID.
type DeleteDashboardsIDCellsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchDashboardsIDCellsIDParams defines parameters for PatchDashboardsIDCellsID.
type PatchDashboardsIDCellsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDCellsIDViewParams defines parameters for GetDashboardsIDCellsIDView.
type GetDashboardsIDCellsIDViewParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchDashboardsIDCellsIDViewParams defines parameters for PatchDashboardsIDCellsIDView.
type PatchDashboardsIDCellsIDViewParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDLabelsParams defines parameters for GetDashboardsIDLabels.
type GetDashboardsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDashboardsIDLabelsParams defines parameters for PostDashboardsIDLabels.
type PostDashboardsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDashboardsIDLabelsIDParams defines parameters for DeleteDashboardsIDLabelsID.
type DeleteDashboardsIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDLogsParams defines parameters for GetDashboardsIDLogs.
type GetDashboardsIDLogsParams struct {
	Offset       *Offset    `json:"offset,omitempty"`
	Limit        *Limit     `json:"limit,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDMembersParams defines parameters for GetDashboardsIDMembers.
type GetDashboardsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDashboardsIDMembersParams defines parameters for PostDashboardsIDMembers.
type PostDashboardsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDashboardsIDMembersIDParams defines parameters for DeleteDashboardsIDMembersID.
type DeleteDashboardsIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDashboardsIDOwnersParams defines parameters for GetDashboardsIDOwners.
type GetDashboardsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDashboardsIDOwnersParams defines parameters for PostDashboardsIDOwners.
type PostDashboardsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDashboardsIDOwnersIDParams defines parameters for DeleteDashboardsIDOwnersID.
type DeleteDashboardsIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDocumentsTemplatesParams defines parameters for GetDocumentsTemplates.
type GetDocumentsTemplatesParams struct {
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDocumentsTemplatesParams defines parameters for PostDocumentsTemplates.
type PostDocumentsTemplatesParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDocumentsTemplatesIDParams defines parameters for DeleteDocumentsTemplatesID.
type DeleteDocumentsTemplatesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDocumentsTemplatesIDParams defines parameters for GetDocumentsTemplatesID.
type GetDocumentsTemplatesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PutDocumentsTemplatesIDParams defines parameters for PutDocumentsTemplatesID.
type PutDocumentsTemplatesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetDocumentsTemplatesIDLabelsParams defines parameters for GetDocumentsTemplatesIDLabels.
type GetDocumentsTemplatesIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostDocumentsTemplatesIDLabelsParams defines parameters for PostDocumentsTemplatesIDLabels.
type PostDocumentsTemplatesIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteDocumentsTemplatesIDLabelsIDParams defines parameters for DeleteDocumentsTemplatesIDLabelsID.
type DeleteDocumentsTemplatesIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetHealthParams defines parameters for GetHealth.
type GetHealthParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetLabelsParams defines parameters for GetLabels.
type GetLabelsParams struct {
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteLabelsIDParams defines parameters for DeleteLabelsID.
type DeleteLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetLabelsIDParams defines parameters for GetLabelsID.
type GetLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchLabelsIDParams defines parameters for PatchLabelsID.
type PatchLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetMeParams defines parameters for GetMe.
type GetMeParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PutMePasswordParams defines parameters for PutMePassword.
type PutMePasswordParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsParams defines parameters for GetOrgs.
type GetOrgsParams struct {
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostOrgsParams defines parameters for PostOrgs.
type PostOrgsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteOrgsIDParams defines parameters for DeleteOrgsID.
type DeleteOrgsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDParams defines parameters for GetOrgsID.
type GetOrgsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchOrgsIDParams defines parameters for PatchOrgsID.
type PatchOrgsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDLabelsParams defines parameters for GetOrgsIDLabels.
type GetOrgsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostOrgsIDLabelsParams defines parameters for PostOrgsIDLabels.
type PostOrgsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteOrgsIDLabelsIDParams defines parameters for DeleteOrgsIDLabelsID.
type DeleteOrgsIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDLogsParams defines parameters for GetOrgsIDLogs.
type GetOrgsIDLogsParams struct {
	Offset       *Offset    `json:"offset,omitempty"`
	Limit        *Limit     `json:"limit,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDMembersParams defines parameters for GetOrgsIDMembers.
type GetOrgsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostOrgsIDMembersParams defines parameters for PostOrgsIDMembers.
type PostOrgsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteOrgsIDMembersIDParams defines parameters for DeleteOrgsIDMembersID.
type DeleteOrgsIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDOwnersParams defines parameters for GetOrgsIDOwners.
type GetOrgsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostOrgsIDOwnersParams defines parameters for PostOrgsIDOwners.
type PostOrgsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteOrgsIDOwnersIDParams defines parameters for DeleteOrgsIDOwnersID.
type DeleteOrgsIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetOrgsIDSecretsParams defines parameters for GetOrgsIDSecrets.
type GetOrgsIDSecretsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchOrgsIDSecretsParams defines parameters for PatchOrgsIDSecrets.
type PatchOrgsIDSecretsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostOrgsIDSecretsParams defines parameters for PostOrgsIDSecrets.
type PostOrgsIDSecretsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostQueryParams defines parameters for PostQuery.
type PostQueryParams struct {
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
	ContentType  *string    `json:"Content-Type,omitempty"`
}

// PostQueryAnalyzeParams defines parameters for PostQueryAnalyze.
type PostQueryAnalyzeParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
	ContentType  *string    `json:"Content-Type,omitempty"`
}

// PostQueryAstParams defines parameters for PostQueryAst.
type PostQueryAstParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
	ContentType  *string    `json:"Content-Type,omitempty"`
}

// GetQuerySuggestionsParams defines parameters for GetQuerySuggestions.
type GetQuerySuggestionsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetQuerySuggestionsNameParams defines parameters for GetQuerySuggestionsName.
type GetQuerySuggestionsNameParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetReadyParams defines parameters for GetReady.
type GetReadyParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetScrapersParams defines parameters for GetScrapers.
type GetScrapersParams struct {
	Name         *string    `json:"name,omitempty"`
	Id           *[]string  `json:"id,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	Org          *string    `json:"org,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostScrapersParams defines parameters for PostScrapers.
type PostScrapersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteScrapersIDParams defines parameters for DeleteScrapersID.
type DeleteScrapersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetScrapersIDParams defines parameters for GetScrapersID.
type GetScrapersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchScrapersIDParams defines parameters for PatchScrapersID.
type PatchScrapersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetScrapersIDLabelsParams defines parameters for GetScrapersIDLabels.
type GetScrapersIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostScrapersIDLabelsParams defines parameters for PostScrapersIDLabels.
type PostScrapersIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteScrapersIDLabelsIDParams defines parameters for DeleteScrapersIDLabelsID.
type DeleteScrapersIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchScrapersIDLabelsIDParams defines parameters for PatchScrapersIDLabelsID.
type PatchScrapersIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetScrapersIDMembersParams defines parameters for GetScrapersIDMembers.
type GetScrapersIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostScrapersIDMembersParams defines parameters for PostScrapersIDMembers.
type PostScrapersIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteScrapersIDMembersIDParams defines parameters for DeleteScrapersIDMembersID.
type DeleteScrapersIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetScrapersIDOwnersParams defines parameters for GetScrapersIDOwners.
type GetScrapersIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostScrapersIDOwnersParams defines parameters for PostScrapersIDOwners.
type PostScrapersIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteScrapersIDOwnersIDParams defines parameters for DeleteScrapersIDOwnersID.
type DeleteScrapersIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetSetupParams defines parameters for GetSetup.
type GetSetupParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostSetupParams defines parameters for PostSetup.
type PostSetupParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostSigninParams defines parameters for PostSignin.
type PostSigninParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostSignoutParams defines parameters for PostSignout.
type PostSignoutParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetSourcesParams defines parameters for GetSources.
type GetSourcesParams struct {
	Org          *string    `json:"org,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostSourcesParams defines parameters for PostSources.
type PostSourcesParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteSourcesIDParams defines parameters for DeleteSourcesID.
type DeleteSourcesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetSourcesIDParams defines parameters for GetSourcesID.
type GetSourcesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchSourcesIDParams defines parameters for PatchSourcesID.
type PatchSourcesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetSourcesIDBucketsParams defines parameters for GetSourcesIDBuckets.
type GetSourcesIDBucketsParams struct {
	Org          *string    `json:"org,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetSourcesIDHealthParams defines parameters for GetSourcesIDHealth.
type GetSourcesIDHealthParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	After        *string    `json:"after,omitempty"`
	User         *string    `json:"user,omitempty"`
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	Limit        *int32     `json:"limit,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksParams defines parameters for PostTasks.
type PostTasksParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTasksIDParams defines parameters for DeleteTasksID.
type DeleteTasksIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDParams defines parameters for GetTasksID.
type GetTasksIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchTasksIDParams defines parameters for PatchTasksID.
type PatchTasksIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDLabelsParams defines parameters for GetTasksIDLabels.
type GetTasksIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksIDLabelsParams defines parameters for PostTasksIDLabels.
type PostTasksIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTasksIDLabelsIDParams defines parameters for DeleteTasksIDLabelsID.
type DeleteTasksIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDLogsParams defines parameters for GetTasksIDLogs.
type GetTasksIDLogsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDMembersParams defines parameters for GetTasksIDMembers.
type GetTasksIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksIDMembersParams defines parameters for PostTasksIDMembers.
type PostTasksIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTasksIDMembersIDParams defines parameters for DeleteTasksIDMembersID.
type DeleteTasksIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDOwnersParams defines parameters for GetTasksIDOwners.
type GetTasksIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksIDOwnersParams defines parameters for PostTasksIDOwners.
type PostTasksIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTasksIDOwnersIDParams defines parameters for DeleteTasksIDOwnersID.
type DeleteTasksIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDRunsParams defines parameters for GetTasksIDRuns.
type GetTasksIDRunsParams struct {
	After        *string    `json:"after,omitempty"`
	Limit        *int32     `json:"limit,omitempty"`
	AfterTime    *time.Time `json:"afterTime,omitempty"`
	BeforeTime   *time.Time `json:"beforeTime,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksIDRunsParams defines parameters for PostTasksIDRuns.
type PostTasksIDRunsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDRunsIDParams defines parameters for GetTasksIDRunsID.
type GetTasksIDRunsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTasksIDRunsIDLogsParams defines parameters for GetTasksIDRunsIDLogs.
type GetTasksIDRunsIDLogsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTasksIDRunsIDRetryParams defines parameters for PostTasksIDRunsIDRetry.
type PostTasksIDRunsIDRetryParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTelegrafsParams defines parameters for GetTelegrafs.
type GetTelegrafsParams struct {
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTelegrafsParams defines parameters for PostTelegrafs.
type PostTelegrafsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTelegrafsIDParams defines parameters for DeleteTelegrafsID.
type DeleteTelegrafsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTelegrafsIDParams defines parameters for GetTelegrafsID.
type GetTelegrafsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
	Accept       *string    `json:"Accept,omitempty"`
}

// PutTelegrafsIDParams defines parameters for PutTelegrafsID.
type PutTelegrafsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTelegrafsIDLabelsParams defines parameters for GetTelegrafsIDLabels.
type GetTelegrafsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTelegrafsIDLabelsParams defines parameters for PostTelegrafsIDLabels.
type PostTelegrafsIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTelegrafsIDLabelsIDParams defines parameters for DeleteTelegrafsIDLabelsID.
type DeleteTelegrafsIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTelegrafsIDMembersParams defines parameters for GetTelegrafsIDMembers.
type GetTelegrafsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTelegrafsIDMembersParams defines parameters for PostTelegrafsIDMembers.
type PostTelegrafsIDMembersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTelegrafsIDMembersIDParams defines parameters for DeleteTelegrafsIDMembersID.
type DeleteTelegrafsIDMembersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetTelegrafsIDOwnersParams defines parameters for GetTelegrafsIDOwners.
type GetTelegrafsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostTelegrafsIDOwnersParams defines parameters for PostTelegrafsIDOwners.
type PostTelegrafsIDOwnersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteTelegrafsIDOwnersIDParams defines parameters for DeleteTelegrafsIDOwnersID.
type DeleteTelegrafsIDOwnersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteUsersIDParams defines parameters for DeleteUsersID.
type DeleteUsersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetUsersIDParams defines parameters for GetUsersID.
type GetUsersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchUsersIDParams defines parameters for PatchUsersID.
type PatchUsersIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetUsersIDLogsParams defines parameters for GetUsersIDLogs.
type GetUsersIDLogsParams struct {
	Offset       *Offset    `json:"offset,omitempty"`
	Limit        *Limit     `json:"limit,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PutUsersIDPasswordParams defines parameters for PutUsersIDPassword.
type PutUsersIDPasswordParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetVariablesParams defines parameters for GetVariables.
type GetVariablesParams struct {
	Org          *string    `json:"org,omitempty"`
	OrgID        *string    `json:"orgID,omitempty"`
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostVariablesParams defines parameters for PostVariables.
type PostVariablesParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteVariablesIDParams defines parameters for DeleteVariablesID.
type DeleteVariablesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetVariablesIDParams defines parameters for GetVariablesID.
type GetVariablesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PatchVariablesIDParams defines parameters for PatchVariablesID.
type PatchVariablesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PutVariablesIDParams defines parameters for PutVariablesID.
type PutVariablesIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// GetVariablesIDLabelsParams defines parameters for GetVariablesIDLabels.
type GetVariablesIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostVariablesIDLabelsParams defines parameters for PostVariablesIDLabels.
type PostVariablesIDLabelsParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// DeleteVariablesIDLabelsIDParams defines parameters for DeleteVariablesIDLabelsID.
type DeleteVariablesIDLabelsIDParams struct {
	ZapTraceSpan *TraceSpan `json:"Zap-Trace-Span,omitempty"`
}

// PostWriteParams defines parameters for PostWrite.
type PostWriteParams struct {
	Org             string          `json:"org"`
	Bucket          string          `json:"bucket"`
	Precision       *WritePrecision `json:"precision,omitempty"`
	ZapTraceSpan    *TraceSpan      `json:"Zap-Trace-Span,omitempty"`
	ContentEncoding *string         `json:"Content-Encoding,omitempty"`
	ContentType     *string         `json:"Content-Type,omitempty"`
	ContentLength   *int32          `json:"Content-Length,omitempty"`
	Accept          *string         `json:"Accept,omitempty"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// GetRoutes request
func (c *Client) GetRoutes(ctx context.Context, params *GetRoutesParams) (*http.Response, error) {
	req, err := NewGetRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetAuthorizations request
func (c *Client) GetAuthorizations(ctx context.Context, params *GetAuthorizationsParams) (*http.Response, error) {
	req, err := NewGetAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostAuthorizations request with JSON body
func (c *Client) PostAuthorizations(ctx context.Context, params *PostAuthorizationsParams, body struct {
	// Embedded struct due to allOf(#/components/schemas/AuthorizationUpdateRequest)
	AuthorizationUpdateRequest
	// Embedded fields due to inline allOf schema
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Self *string `json:"self,omitempty"`
		User *string `json:"user,omitempty"`
	} `json:"links,omitempty"`
	Org         *string      `json:"org,omitempty"`
	OrgID       *string      `json:"orgID,omitempty"`
	Permissions []Permission `json:"permissions,omitempty"`
	Token       *string      `json:"token,omitempty"`
	User        *string      `json:"user,omitempty"`
	UserID      *string      `json:"userID,omitempty"`
}) (*http.Response, error) {
	req, err := NewPostAuthorizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteAuthorizationsID request
func (c *Client) DeleteAuthorizationsID(ctx context.Context, authID string, params *DeleteAuthorizationsIDParams) (*http.Response, error) {
	req, err := NewDeleteAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetAuthorizationsID request
func (c *Client) GetAuthorizationsID(ctx context.Context, authID string, params *GetAuthorizationsIDParams) (*http.Response, error) {
	req, err := NewGetAuthorizationsIDRequest(c.Server, authID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchAuthorizationsID request with JSON body
func (c *Client) PatchAuthorizationsID(ctx context.Context, authID string, params *PatchAuthorizationsIDParams, body AuthorizationUpdateRequest) (*http.Response, error) {
	req, err := NewPatchAuthorizationsIDRequest(c.Server, authID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBuckets request
func (c *Client) GetBuckets(ctx context.Context, params *GetBucketsParams) (*http.Response, error) {
	req, err := NewGetBucketsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostBuckets request with JSON body
func (c *Client) PostBuckets(ctx context.Context, params *PostBucketsParams, body Bucket) (*http.Response, error) {
	req, err := NewPostBucketsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteBucketsID request
func (c *Client) DeleteBucketsID(ctx context.Context, bucketID string, params *DeleteBucketsIDParams) (*http.Response, error) {
	req, err := NewDeleteBucketsIDRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBucketsID request
func (c *Client) GetBucketsID(ctx context.Context, bucketID string, params *GetBucketsIDParams) (*http.Response, error) {
	req, err := NewGetBucketsIDRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchBucketsID request with JSON body
func (c *Client) PatchBucketsID(ctx context.Context, bucketID string, params *PatchBucketsIDParams, body Bucket) (*http.Response, error) {
	req, err := NewPatchBucketsIDRequest(c.Server, bucketID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBucketsIDLabels request
func (c *Client) GetBucketsIDLabels(ctx context.Context, bucketID string, params *GetBucketsIDLabelsParams) (*http.Response, error) {
	req, err := NewGetBucketsIDLabelsRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostBucketsIDLabels request with JSON body
func (c *Client) PostBucketsIDLabels(ctx context.Context, bucketID string, params *PostBucketsIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostBucketsIDLabelsRequest(c.Server, bucketID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteBucketsIDLabelsID request
func (c *Client) DeleteBucketsIDLabelsID(ctx context.Context, bucketID string, labelID string, params *DeleteBucketsIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteBucketsIDLabelsIDRequest(c.Server, bucketID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBucketsIDLogs request
func (c *Client) GetBucketsIDLogs(ctx context.Context, bucketID string, params *GetBucketsIDLogsParams) (*http.Response, error) {
	req, err := NewGetBucketsIDLogsRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBucketsIDMembers request
func (c *Client) GetBucketsIDMembers(ctx context.Context, bucketID string, params *GetBucketsIDMembersParams) (*http.Response, error) {
	req, err := NewGetBucketsIDMembersRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostBucketsIDMembers request with JSON body
func (c *Client) PostBucketsIDMembers(ctx context.Context, bucketID string, params *PostBucketsIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostBucketsIDMembersRequest(c.Server, bucketID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteBucketsIDMembersID request
func (c *Client) DeleteBucketsIDMembersID(ctx context.Context, bucketID string, userID string, params *DeleteBucketsIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteBucketsIDMembersIDRequest(c.Server, bucketID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetBucketsIDOwners request
func (c *Client) GetBucketsIDOwners(ctx context.Context, bucketID string, params *GetBucketsIDOwnersParams) (*http.Response, error) {
	req, err := NewGetBucketsIDOwnersRequest(c.Server, bucketID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostBucketsIDOwners request with JSON body
func (c *Client) PostBucketsIDOwners(ctx context.Context, bucketID string, params *PostBucketsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostBucketsIDOwnersRequest(c.Server, bucketID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteBucketsIDOwnersID request
func (c *Client) DeleteBucketsIDOwnersID(ctx context.Context, bucketID string, userID string, params *DeleteBucketsIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteBucketsIDOwnersIDRequest(c.Server, bucketID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboards request
func (c *Client) GetDashboards(ctx context.Context, params *GetDashboardsParams) (*http.Response, error) {
	req, err := NewGetDashboardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDashboards request with JSON body
func (c *Client) PostDashboards(ctx context.Context, params *PostDashboardsParams, body CreateDashboardRequest) (*http.Response, error) {
	req, err := NewPostDashboardsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDashboardsID request
func (c *Client) DeleteDashboardsID(ctx context.Context, dashboardID string, params *DeleteDashboardsIDParams) (*http.Response, error) {
	req, err := NewDeleteDashboardsIDRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsID request
func (c *Client) GetDashboardsID(ctx context.Context, dashboardID string, params *GetDashboardsIDParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchDashboardsID request with JSON body
func (c *Client) PatchDashboardsID(ctx context.Context, dashboardID string, params *PatchDashboardsIDParams, body struct {
	// Embedded struct due to allOf(#/components/schemas/CreateDashboardRequest)
	CreateDashboardRequest
	// Embedded fields due to inline allOf schema
	Cells  *Cells  `json:"cells,omitempty"`
	Id     *string `json:"id,omitempty"`
	Labels *Labels `json:"labels,omitempty"`
	Links  *struct {
		Cells   *Link `json:"cells,omitempty"`
		Labels  *Link `json:"labels,omitempty"`
		Logs    *Link `json:"logs,omitempty"`
		Members *Link `json:"members,omitempty"`
		Org     *Link `json:"org,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Self    *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Meta *struct {
		CreatedAt *time.Time `json:"createdAt,omitempty"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"meta,omitempty"`
}) (*http.Response, error) {
	req, err := NewPatchDashboardsIDRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDashboardsIDCells request with JSON body
func (c *Client) PostDashboardsIDCells(ctx context.Context, dashboardID string, params *PostDashboardsIDCellsParams, body CreateCell) (*http.Response, error) {
	req, err := NewPostDashboardsIDCellsRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutDashboardsIDCells request with JSON body
func (c *Client) PutDashboardsIDCells(ctx context.Context, dashboardID string, params *PutDashboardsIDCellsParams, body Cells) (*http.Response, error) {
	req, err := NewPutDashboardsIDCellsRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDashboardsIDCellsID request
func (c *Client) DeleteDashboardsIDCellsID(ctx context.Context, dashboardID string, cellID string, params *DeleteDashboardsIDCellsIDParams) (*http.Response, error) {
	req, err := NewDeleteDashboardsIDCellsIDRequest(c.Server, dashboardID, cellID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchDashboardsIDCellsID request with JSON body
func (c *Client) PatchDashboardsIDCellsID(ctx context.Context, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDParams, body CellUpdate) (*http.Response, error) {
	req, err := NewPatchDashboardsIDCellsIDRequest(c.Server, dashboardID, cellID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsIDCellsIDView request
func (c *Client) GetDashboardsIDCellsIDView(ctx context.Context, dashboardID string, cellID string, params *GetDashboardsIDCellsIDViewParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDCellsIDViewRequest(c.Server, dashboardID, cellID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchDashboardsIDCellsIDView request with JSON body
func (c *Client) PatchDashboardsIDCellsIDView(ctx context.Context, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDViewParams, body View) (*http.Response, error) {
	req, err := NewPatchDashboardsIDCellsIDViewRequest(c.Server, dashboardID, cellID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsIDLabels request
func (c *Client) GetDashboardsIDLabels(ctx context.Context, dashboardID string, params *GetDashboardsIDLabelsParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDLabelsRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDashboardsIDLabels request with JSON body
func (c *Client) PostDashboardsIDLabels(ctx context.Context, dashboardID string, params *PostDashboardsIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostDashboardsIDLabelsRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDashboardsIDLabelsID request
func (c *Client) DeleteDashboardsIDLabelsID(ctx context.Context, dashboardID string, labelID string, params *DeleteDashboardsIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteDashboardsIDLabelsIDRequest(c.Server, dashboardID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsIDLogs request
func (c *Client) GetDashboardsIDLogs(ctx context.Context, dashboardID string, params *GetDashboardsIDLogsParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDLogsRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsIDMembers request
func (c *Client) GetDashboardsIDMembers(ctx context.Context, dashboardID string, params *GetDashboardsIDMembersParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDMembersRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDashboardsIDMembers request with JSON body
func (c *Client) PostDashboardsIDMembers(ctx context.Context, dashboardID string, params *PostDashboardsIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostDashboardsIDMembersRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDashboardsIDMembersID request
func (c *Client) DeleteDashboardsIDMembersID(ctx context.Context, dashboardID string, userID string, params *DeleteDashboardsIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteDashboardsIDMembersIDRequest(c.Server, dashboardID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDashboardsIDOwners request
func (c *Client) GetDashboardsIDOwners(ctx context.Context, dashboardID string, params *GetDashboardsIDOwnersParams) (*http.Response, error) {
	req, err := NewGetDashboardsIDOwnersRequest(c.Server, dashboardID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDashboardsIDOwners request with JSON body
func (c *Client) PostDashboardsIDOwners(ctx context.Context, dashboardID string, params *PostDashboardsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostDashboardsIDOwnersRequest(c.Server, dashboardID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDashboardsIDOwnersID request
func (c *Client) DeleteDashboardsIDOwnersID(ctx context.Context, dashboardID string, userID string, params *DeleteDashboardsIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteDashboardsIDOwnersIDRequest(c.Server, dashboardID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDocumentsTemplates request
func (c *Client) GetDocumentsTemplates(ctx context.Context, params *GetDocumentsTemplatesParams) (*http.Response, error) {
	req, err := NewGetDocumentsTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDocumentsTemplates request with JSON body
func (c *Client) PostDocumentsTemplates(ctx context.Context, params *PostDocumentsTemplatesParams, body DocumentCreate) (*http.Response, error) {
	req, err := NewPostDocumentsTemplatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDocumentsTemplatesID request
func (c *Client) DeleteDocumentsTemplatesID(ctx context.Context, templateID string, params *DeleteDocumentsTemplatesIDParams) (*http.Response, error) {
	req, err := NewDeleteDocumentsTemplatesIDRequest(c.Server, templateID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDocumentsTemplatesID request
func (c *Client) GetDocumentsTemplatesID(ctx context.Context, templateID string, params *GetDocumentsTemplatesIDParams) (*http.Response, error) {
	req, err := NewGetDocumentsTemplatesIDRequest(c.Server, templateID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutDocumentsTemplatesID request with JSON body
func (c *Client) PutDocumentsTemplatesID(ctx context.Context, templateID string, params *PutDocumentsTemplatesIDParams, body DocumentUpdate) (*http.Response, error) {
	req, err := NewPutDocumentsTemplatesIDRequest(c.Server, templateID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetDocumentsTemplatesIDLabels request
func (c *Client) GetDocumentsTemplatesIDLabels(ctx context.Context, templateID string, params *GetDocumentsTemplatesIDLabelsParams) (*http.Response, error) {
	req, err := NewGetDocumentsTemplatesIDLabelsRequest(c.Server, templateID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostDocumentsTemplatesIDLabels request with JSON body
func (c *Client) PostDocumentsTemplatesIDLabels(ctx context.Context, templateID string, params *PostDocumentsTemplatesIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostDocumentsTemplatesIDLabelsRequest(c.Server, templateID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteDocumentsTemplatesIDLabelsID request
func (c *Client) DeleteDocumentsTemplatesIDLabelsID(ctx context.Context, templateID string, labelID string, params *DeleteDocumentsTemplatesIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteDocumentsTemplatesIDLabelsIDRequest(c.Server, templateID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetHealth request
func (c *Client) GetHealth(ctx context.Context, params *GetHealthParams) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetLabels request
func (c *Client) GetLabels(ctx context.Context, params *GetLabelsParams) (*http.Response, error) {
	req, err := NewGetLabelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostLabels request with JSON body
func (c *Client) PostLabels(ctx context.Context, body LabelCreateRequest) (*http.Response, error) {
	req, err := NewPostLabelsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteLabelsID request
func (c *Client) DeleteLabelsID(ctx context.Context, labelID string, params *DeleteLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteLabelsIDRequest(c.Server, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetLabelsID request
func (c *Client) GetLabelsID(ctx context.Context, labelID string, params *GetLabelsIDParams) (*http.Response, error) {
	req, err := NewGetLabelsIDRequest(c.Server, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchLabelsID request with JSON body
func (c *Client) PatchLabelsID(ctx context.Context, labelID string, params *PatchLabelsIDParams, body LabelUpdate) (*http.Response, error) {
	req, err := NewPatchLabelsIDRequest(c.Server, labelID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetMe request
func (c *Client) GetMe(ctx context.Context, params *GetMeParams) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutMePassword request with JSON body
func (c *Client) PutMePassword(ctx context.Context, params *PutMePasswordParams, body PasswordResetBody) (*http.Response, error) {
	req, err := NewPutMePasswordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgs request
func (c *Client) GetOrgs(ctx context.Context, params *GetOrgsParams) (*http.Response, error) {
	req, err := NewGetOrgsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostOrgs request with JSON body
func (c *Client) PostOrgs(ctx context.Context, params *PostOrgsParams, body Organization) (*http.Response, error) {
	req, err := NewPostOrgsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteOrgsID request
func (c *Client) DeleteOrgsID(ctx context.Context, orgID string, params *DeleteOrgsIDParams) (*http.Response, error) {
	req, err := NewDeleteOrgsIDRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsID request
func (c *Client) GetOrgsID(ctx context.Context, orgID string, params *GetOrgsIDParams) (*http.Response, error) {
	req, err := NewGetOrgsIDRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchOrgsID request with JSON body
func (c *Client) PatchOrgsID(ctx context.Context, orgID string, params *PatchOrgsIDParams, body Organization) (*http.Response, error) {
	req, err := NewPatchOrgsIDRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsIDLabels request
func (c *Client) GetOrgsIDLabels(ctx context.Context, orgID string, params *GetOrgsIDLabelsParams) (*http.Response, error) {
	req, err := NewGetOrgsIDLabelsRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostOrgsIDLabels request with JSON body
func (c *Client) PostOrgsIDLabels(ctx context.Context, orgID string, params *PostOrgsIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostOrgsIDLabelsRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteOrgsIDLabelsID request
func (c *Client) DeleteOrgsIDLabelsID(ctx context.Context, orgID string, labelID string, params *DeleteOrgsIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteOrgsIDLabelsIDRequest(c.Server, orgID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsIDLogs request
func (c *Client) GetOrgsIDLogs(ctx context.Context, orgID string, params *GetOrgsIDLogsParams) (*http.Response, error) {
	req, err := NewGetOrgsIDLogsRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsIDMembers request
func (c *Client) GetOrgsIDMembers(ctx context.Context, orgID string, params *GetOrgsIDMembersParams) (*http.Response, error) {
	req, err := NewGetOrgsIDMembersRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostOrgsIDMembers request with JSON body
func (c *Client) PostOrgsIDMembers(ctx context.Context, orgID string, params *PostOrgsIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostOrgsIDMembersRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteOrgsIDMembersID request
func (c *Client) DeleteOrgsIDMembersID(ctx context.Context, orgID string, userID string, params *DeleteOrgsIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteOrgsIDMembersIDRequest(c.Server, orgID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsIDOwners request
func (c *Client) GetOrgsIDOwners(ctx context.Context, orgID string, params *GetOrgsIDOwnersParams) (*http.Response, error) {
	req, err := NewGetOrgsIDOwnersRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostOrgsIDOwners request with JSON body
func (c *Client) PostOrgsIDOwners(ctx context.Context, orgID string, params *PostOrgsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostOrgsIDOwnersRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteOrgsIDOwnersID request
func (c *Client) DeleteOrgsIDOwnersID(ctx context.Context, orgID string, userID string, params *DeleteOrgsIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteOrgsIDOwnersIDRequest(c.Server, orgID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetOrgsIDSecrets request
func (c *Client) GetOrgsIDSecrets(ctx context.Context, orgID string, params *GetOrgsIDSecretsParams) (*http.Response, error) {
	req, err := NewGetOrgsIDSecretsRequest(c.Server, orgID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchOrgsIDSecrets request with JSON body
func (c *Client) PatchOrgsIDSecrets(ctx context.Context, orgID string, params *PatchOrgsIDSecretsParams, body Secrets) (*http.Response, error) {
	req, err := NewPatchOrgsIDSecretsRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostOrgsIDSecrets request with JSON body
func (c *Client) PostOrgsIDSecrets(ctx context.Context, orgID string, params *PostOrgsIDSecretsParams, body SecretKeys) (*http.Response, error) {
	req, err := NewPostOrgsIDSecretsRequest(c.Server, orgID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostQuery request with JSON body
func (c *Client) PostQuery(ctx context.Context, params *PostQueryParams, body *Query) (*http.Response, error) {
	req, err := NewPostQueryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostQueryWithBody request with arbitrary body
func (c *Client) PostQueryWithBody(ctx context.Context, params *PostQueryParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostQueryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostQueryAnalyze request with JSON body
func (c *Client) PostQueryAnalyze(ctx context.Context, params *PostQueryAnalyzeParams, body *Query) (*http.Response, error) {
	req, err := NewPostQueryAnalyzeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostQueryAst request with JSON body
func (c *Client) PostQueryAst(ctx context.Context, params *PostQueryAstParams, body *LanguageRequest) (*http.Response, error) {
	req, err := NewPostQueryAstRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetQuerySuggestions request
func (c *Client) GetQuerySuggestions(ctx context.Context, params *GetQuerySuggestionsParams) (*http.Response, error) {
	req, err := NewGetQuerySuggestionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetQuerySuggestionsName request
func (c *Client) GetQuerySuggestionsName(ctx context.Context, name string, params *GetQuerySuggestionsNameParams) (*http.Response, error) {
	req, err := NewGetQuerySuggestionsNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetReady request
func (c *Client) GetReady(ctx context.Context, params *GetReadyParams) (*http.Response, error) {
	req, err := NewGetReadyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetScrapers request
func (c *Client) GetScrapers(ctx context.Context, params *GetScrapersParams) (*http.Response, error) {
	req, err := NewGetScrapersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostScrapers request with JSON body
func (c *Client) PostScrapers(ctx context.Context, params *PostScrapersParams, body ScraperTargetRequest) (*http.Response, error) {
	req, err := NewPostScrapersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteScrapersID request
func (c *Client) DeleteScrapersID(ctx context.Context, scraperTargetID string, params *DeleteScrapersIDParams) (*http.Response, error) {
	req, err := NewDeleteScrapersIDRequest(c.Server, scraperTargetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetScrapersID request
func (c *Client) GetScrapersID(ctx context.Context, scraperTargetID string, params *GetScrapersIDParams) (*http.Response, error) {
	req, err := NewGetScrapersIDRequest(c.Server, scraperTargetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchScrapersID request with JSON body
func (c *Client) PatchScrapersID(ctx context.Context, scraperTargetID string, params *PatchScrapersIDParams, body ScraperTargetRequest) (*http.Response, error) {
	req, err := NewPatchScrapersIDRequest(c.Server, scraperTargetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetScrapersIDLabels request
func (c *Client) GetScrapersIDLabels(ctx context.Context, scraperTargetID string, params *GetScrapersIDLabelsParams) (*http.Response, error) {
	req, err := NewGetScrapersIDLabelsRequest(c.Server, scraperTargetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostScrapersIDLabels request with JSON body
func (c *Client) PostScrapersIDLabels(ctx context.Context, scraperTargetID string, params *PostScrapersIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostScrapersIDLabelsRequest(c.Server, scraperTargetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteScrapersIDLabelsID request
func (c *Client) DeleteScrapersIDLabelsID(ctx context.Context, scraperTargetID string, labelID string, params *DeleteScrapersIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteScrapersIDLabelsIDRequest(c.Server, scraperTargetID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchScrapersIDLabelsID request with JSON body
func (c *Client) PatchScrapersIDLabelsID(ctx context.Context, scraperTargetID string, labelID string, params *PatchScrapersIDLabelsIDParams, body Label) (*http.Response, error) {
	req, err := NewPatchScrapersIDLabelsIDRequest(c.Server, scraperTargetID, labelID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetScrapersIDMembers request
func (c *Client) GetScrapersIDMembers(ctx context.Context, scraperTargetID string, params *GetScrapersIDMembersParams) (*http.Response, error) {
	req, err := NewGetScrapersIDMembersRequest(c.Server, scraperTargetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostScrapersIDMembers request with JSON body
func (c *Client) PostScrapersIDMembers(ctx context.Context, scraperTargetID string, params *PostScrapersIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostScrapersIDMembersRequest(c.Server, scraperTargetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteScrapersIDMembersID request
func (c *Client) DeleteScrapersIDMembersID(ctx context.Context, scraperTargetID string, userID string, params *DeleteScrapersIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteScrapersIDMembersIDRequest(c.Server, scraperTargetID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetScrapersIDOwners request
func (c *Client) GetScrapersIDOwners(ctx context.Context, scraperTargetID string, params *GetScrapersIDOwnersParams) (*http.Response, error) {
	req, err := NewGetScrapersIDOwnersRequest(c.Server, scraperTargetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostScrapersIDOwners request with JSON body
func (c *Client) PostScrapersIDOwners(ctx context.Context, scraperTargetID string, params *PostScrapersIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostScrapersIDOwnersRequest(c.Server, scraperTargetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteScrapersIDOwnersID request
func (c *Client) DeleteScrapersIDOwnersID(ctx context.Context, scraperTargetID string, userID string, params *DeleteScrapersIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteScrapersIDOwnersIDRequest(c.Server, scraperTargetID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSetup request
func (c *Client) GetSetup(ctx context.Context, params *GetSetupParams) (*http.Response, error) {
	req, err := NewGetSetupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostSetup request with JSON body
func (c *Client) PostSetup(ctx context.Context, params *PostSetupParams, body OnboardingRequest) (*http.Response, error) {
	req, err := NewPostSetupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostSignin request
func (c *Client) PostSignin(ctx context.Context, params *PostSigninParams) (*http.Response, error) {
	req, err := NewPostSigninRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostSignout request
func (c *Client) PostSignout(ctx context.Context, params *PostSignoutParams) (*http.Response, error) {
	req, err := NewPostSignoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSources request
func (c *Client) GetSources(ctx context.Context, params *GetSourcesParams) (*http.Response, error) {
	req, err := NewGetSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostSources request with JSON body
func (c *Client) PostSources(ctx context.Context, params *PostSourcesParams, body Source) (*http.Response, error) {
	req, err := NewPostSourcesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteSourcesID request
func (c *Client) DeleteSourcesID(ctx context.Context, sourceID string, params *DeleteSourcesIDParams) (*http.Response, error) {
	req, err := NewDeleteSourcesIDRequest(c.Server, sourceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSourcesID request
func (c *Client) GetSourcesID(ctx context.Context, sourceID string, params *GetSourcesIDParams) (*http.Response, error) {
	req, err := NewGetSourcesIDRequest(c.Server, sourceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchSourcesID request with JSON body
func (c *Client) PatchSourcesID(ctx context.Context, sourceID string, params *PatchSourcesIDParams, body Source) (*http.Response, error) {
	req, err := NewPatchSourcesIDRequest(c.Server, sourceID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSourcesIDBuckets request
func (c *Client) GetSourcesIDBuckets(ctx context.Context, sourceID string, params *GetSourcesIDBucketsParams) (*http.Response, error) {
	req, err := NewGetSourcesIDBucketsRequest(c.Server, sourceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSourcesIDHealth request
func (c *Client) GetSourcesIDHealth(ctx context.Context, sourceID string, params *GetSourcesIDHealthParams) (*http.Response, error) {
	req, err := NewGetSourcesIDHealthRequest(c.Server, sourceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasks request
func (c *Client) GetTasks(ctx context.Context, params *GetTasksParams) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasks request with JSON body
func (c *Client) PostTasks(ctx context.Context, params *PostTasksParams, body TaskCreateRequest) (*http.Response, error) {
	req, err := NewPostTasksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTasksID request
func (c *Client) DeleteTasksID(ctx context.Context, taskID string, params *DeleteTasksIDParams) (*http.Response, error) {
	req, err := NewDeleteTasksIDRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksID request
func (c *Client) GetTasksID(ctx context.Context, taskID string, params *GetTasksIDParams) (*http.Response, error) {
	req, err := NewGetTasksIDRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchTasksID request with JSON body
func (c *Client) PatchTasksID(ctx context.Context, taskID string, params *PatchTasksIDParams, body TaskUpdateRequest) (*http.Response, error) {
	req, err := NewPatchTasksIDRequest(c.Server, taskID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDLabels request
func (c *Client) GetTasksIDLabels(ctx context.Context, taskID string, params *GetTasksIDLabelsParams) (*http.Response, error) {
	req, err := NewGetTasksIDLabelsRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasksIDLabels request with JSON body
func (c *Client) PostTasksIDLabels(ctx context.Context, taskID string, params *PostTasksIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostTasksIDLabelsRequest(c.Server, taskID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTasksIDLabelsID request
func (c *Client) DeleteTasksIDLabelsID(ctx context.Context, taskID string, labelID string, params *DeleteTasksIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteTasksIDLabelsIDRequest(c.Server, taskID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDLogs request
func (c *Client) GetTasksIDLogs(ctx context.Context, taskID string, params *GetTasksIDLogsParams) (*http.Response, error) {
	req, err := NewGetTasksIDLogsRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDMembers request
func (c *Client) GetTasksIDMembers(ctx context.Context, taskID string, params *GetTasksIDMembersParams) (*http.Response, error) {
	req, err := NewGetTasksIDMembersRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasksIDMembers request with JSON body
func (c *Client) PostTasksIDMembers(ctx context.Context, taskID string, params *PostTasksIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostTasksIDMembersRequest(c.Server, taskID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTasksIDMembersID request
func (c *Client) DeleteTasksIDMembersID(ctx context.Context, taskID string, userID string, params *DeleteTasksIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteTasksIDMembersIDRequest(c.Server, taskID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDOwners request
func (c *Client) GetTasksIDOwners(ctx context.Context, taskID string, params *GetTasksIDOwnersParams) (*http.Response, error) {
	req, err := NewGetTasksIDOwnersRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasksIDOwners request with JSON body
func (c *Client) PostTasksIDOwners(ctx context.Context, taskID string, params *PostTasksIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostTasksIDOwnersRequest(c.Server, taskID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTasksIDOwnersID request
func (c *Client) DeleteTasksIDOwnersID(ctx context.Context, taskID string, userID string, params *DeleteTasksIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteTasksIDOwnersIDRequest(c.Server, taskID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDRuns request
func (c *Client) GetTasksIDRuns(ctx context.Context, taskID string, params *GetTasksIDRunsParams) (*http.Response, error) {
	req, err := NewGetTasksIDRunsRequest(c.Server, taskID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasksIDRuns request with JSON body
func (c *Client) PostTasksIDRuns(ctx context.Context, taskID string, params *PostTasksIDRunsParams, body *RunManually) (*http.Response, error) {
	req, err := NewPostTasksIDRunsRequest(c.Server, taskID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDRunsID request
func (c *Client) GetTasksIDRunsID(ctx context.Context, taskID string, runID string, params *GetTasksIDRunsIDParams) (*http.Response, error) {
	req, err := NewGetTasksIDRunsIDRequest(c.Server, taskID, runID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTasksIDRunsIDLogs request
func (c *Client) GetTasksIDRunsIDLogs(ctx context.Context, taskID string, runID string, params *GetTasksIDRunsIDLogsParams) (*http.Response, error) {
	req, err := NewGetTasksIDRunsIDLogsRequest(c.Server, taskID, runID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTasksIDRunsIDRetry request
func (c *Client) PostTasksIDRunsIDRetry(ctx context.Context, taskID string, runID string, params *PostTasksIDRunsIDRetryParams) (*http.Response, error) {
	req, err := NewPostTasksIDRunsIDRetryRequest(c.Server, taskID, runID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTelegrafs request
func (c *Client) GetTelegrafs(ctx context.Context, params *GetTelegrafsParams) (*http.Response, error) {
	req, err := NewGetTelegrafsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTelegrafs request with JSON body
func (c *Client) PostTelegrafs(ctx context.Context, params *PostTelegrafsParams, body TelegrafRequest) (*http.Response, error) {
	req, err := NewPostTelegrafsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTelegrafsID request
func (c *Client) DeleteTelegrafsID(ctx context.Context, telegrafID string, params *DeleteTelegrafsIDParams) (*http.Response, error) {
	req, err := NewDeleteTelegrafsIDRequest(c.Server, telegrafID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTelegrafsID request
func (c *Client) GetTelegrafsID(ctx context.Context, telegrafID string, params *GetTelegrafsIDParams) (*http.Response, error) {
	req, err := NewGetTelegrafsIDRequest(c.Server, telegrafID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutTelegrafsID request with JSON body
func (c *Client) PutTelegrafsID(ctx context.Context, telegrafID string, params *PutTelegrafsIDParams, body TelegrafRequest) (*http.Response, error) {
	req, err := NewPutTelegrafsIDRequest(c.Server, telegrafID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTelegrafsIDLabels request
func (c *Client) GetTelegrafsIDLabels(ctx context.Context, telegrafID string, params *GetTelegrafsIDLabelsParams) (*http.Response, error) {
	req, err := NewGetTelegrafsIDLabelsRequest(c.Server, telegrafID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTelegrafsIDLabels request with JSON body
func (c *Client) PostTelegrafsIDLabels(ctx context.Context, telegrafID string, params *PostTelegrafsIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostTelegrafsIDLabelsRequest(c.Server, telegrafID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTelegrafsIDLabelsID request
func (c *Client) DeleteTelegrafsIDLabelsID(ctx context.Context, telegrafID string, labelID string, params *DeleteTelegrafsIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteTelegrafsIDLabelsIDRequest(c.Server, telegrafID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTelegrafsIDMembers request
func (c *Client) GetTelegrafsIDMembers(ctx context.Context, telegrafID string, params *GetTelegrafsIDMembersParams) (*http.Response, error) {
	req, err := NewGetTelegrafsIDMembersRequest(c.Server, telegrafID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTelegrafsIDMembers request with JSON body
func (c *Client) PostTelegrafsIDMembers(ctx context.Context, telegrafID string, params *PostTelegrafsIDMembersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostTelegrafsIDMembersRequest(c.Server, telegrafID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTelegrafsIDMembersID request
func (c *Client) DeleteTelegrafsIDMembersID(ctx context.Context, telegrafID string, userID string, params *DeleteTelegrafsIDMembersIDParams) (*http.Response, error) {
	req, err := NewDeleteTelegrafsIDMembersIDRequest(c.Server, telegrafID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetTelegrafsIDOwners request
func (c *Client) GetTelegrafsIDOwners(ctx context.Context, telegrafID string, params *GetTelegrafsIDOwnersParams) (*http.Response, error) {
	req, err := NewGetTelegrafsIDOwnersRequest(c.Server, telegrafID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostTelegrafsIDOwners request with JSON body
func (c *Client) PostTelegrafsIDOwners(ctx context.Context, telegrafID string, params *PostTelegrafsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Response, error) {
	req, err := NewPostTelegrafsIDOwnersRequest(c.Server, telegrafID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteTelegrafsIDOwnersID request
func (c *Client) DeleteTelegrafsIDOwnersID(ctx context.Context, telegrafID string, userID string, params *DeleteTelegrafsIDOwnersIDParams) (*http.Response, error) {
	req, err := NewDeleteTelegrafsIDOwnersIDRequest(c.Server, telegrafID, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetUsers request
func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostUsers request with JSON body
func (c *Client) PostUsers(ctx context.Context, params *PostUsersParams, body User) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteUsersID request
func (c *Client) DeleteUsersID(ctx context.Context, userID string, params *DeleteUsersIDParams) (*http.Response, error) {
	req, err := NewDeleteUsersIDRequest(c.Server, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetUsersID request
func (c *Client) GetUsersID(ctx context.Context, userID string, params *GetUsersIDParams) (*http.Response, error) {
	req, err := NewGetUsersIDRequest(c.Server, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchUsersID request with JSON body
func (c *Client) PatchUsersID(ctx context.Context, userID string, params *PatchUsersIDParams, body User) (*http.Response, error) {
	req, err := NewPatchUsersIDRequest(c.Server, userID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetUsersIDLogs request
func (c *Client) GetUsersIDLogs(ctx context.Context, userID string, params *GetUsersIDLogsParams) (*http.Response, error) {
	req, err := NewGetUsersIDLogsRequest(c.Server, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutUsersIDPassword request with JSON body
func (c *Client) PutUsersIDPassword(ctx context.Context, userID string, params *PutUsersIDPasswordParams, body PasswordResetBody) (*http.Response, error) {
	req, err := NewPutUsersIDPasswordRequest(c.Server, userID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetVariables request
func (c *Client) GetVariables(ctx context.Context, params *GetVariablesParams) (*http.Response, error) {
	req, err := NewGetVariablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostVariables request with JSON body
func (c *Client) PostVariables(ctx context.Context, params *PostVariablesParams, body Variable) (*http.Response, error) {
	req, err := NewPostVariablesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteVariablesID request
func (c *Client) DeleteVariablesID(ctx context.Context, variableID string, params *DeleteVariablesIDParams) (*http.Response, error) {
	req, err := NewDeleteVariablesIDRequest(c.Server, variableID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetVariablesID request
func (c *Client) GetVariablesID(ctx context.Context, variableID string, params *GetVariablesIDParams) (*http.Response, error) {
	req, err := NewGetVariablesIDRequest(c.Server, variableID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PatchVariablesID request with JSON body
func (c *Client) PatchVariablesID(ctx context.Context, variableID string, params *PatchVariablesIDParams, body Variable) (*http.Response, error) {
	req, err := NewPatchVariablesIDRequest(c.Server, variableID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PutVariablesID request with JSON body
func (c *Client) PutVariablesID(ctx context.Context, variableID string, params *PutVariablesIDParams, body Variable) (*http.Response, error) {
	req, err := NewPutVariablesIDRequest(c.Server, variableID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetVariablesIDLabels request
func (c *Client) GetVariablesIDLabels(ctx context.Context, variableID string, params *GetVariablesIDLabelsParams) (*http.Response, error) {
	req, err := NewGetVariablesIDLabelsRequest(c.Server, variableID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostVariablesIDLabels request with JSON body
func (c *Client) PostVariablesIDLabels(ctx context.Context, variableID string, params *PostVariablesIDLabelsParams, body LabelMapping) (*http.Response, error) {
	req, err := NewPostVariablesIDLabelsRequest(c.Server, variableID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// DeleteVariablesIDLabelsID request
func (c *Client) DeleteVariablesIDLabelsID(ctx context.Context, variableID string, labelID string, params *DeleteVariablesIDLabelsIDParams) (*http.Response, error) {
	req, err := NewDeleteVariablesIDLabelsIDRequest(c.Server, variableID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// PostWriteWithBody request with arbitrary body
func (c *Client) PostWriteWithBody(ctx context.Context, params *PostWriteParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostWriteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetRoutesRequest generates requests for GetRoutes
func NewGetRoutesRequest(server string, params *GetRoutesParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetAuthorizationsRequest generates requests for GetAuthorizations
func NewGetAuthorizationsRequest(server string, params *GetAuthorizationsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/authorizations", server)

	var queryStrings []string

	var queryParam0 string
	if params.UserID != nil {

		queryParam0, err = styleParam("form", true, "userID", *params.UserID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.User != nil {

		queryParam1, err = styleParam("form", true, "user", *params.User)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.OrgID != nil {

		queryParam2, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.Org != nil {

		queryParam3, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostAuthorizationsRequest generates requests for PostAuthorizations with JSON body
func NewPostAuthorizationsRequest(server string, params *PostAuthorizationsParams, body struct {
	// Embedded struct due to allOf(#/components/schemas/AuthorizationUpdateRequest)
	AuthorizationUpdateRequest
	// Embedded fields due to inline allOf schema
	Id    *string `json:"id,omitempty"`
	Links *struct {
		Self *string `json:"self,omitempty"`
		User *string `json:"user,omitempty"`
	} `json:"links,omitempty"`
	Org         *string      `json:"org,omitempty"`
	OrgID       *string      `json:"orgID,omitempty"`
	Permissions []Permission `json:"permissions,omitempty"`
	Token       *string      `json:"token,omitempty"`
	User        *string      `json:"user,omitempty"`
	UserID      *string      `json:"userID,omitempty"`
}) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostAuthorizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAuthorizationsRequestWithBody generates requests for PostAuthorizations with non-JSON body
func NewPostAuthorizationsRequestWithBody(server string, params *PostAuthorizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/authorizations", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteAuthorizationsIDRequest generates requests for DeleteAuthorizationsID
func NewDeleteAuthorizationsIDRequest(server string, authID string, params *DeleteAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "authID", authID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/authorizations/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetAuthorizationsIDRequest generates requests for GetAuthorizationsID
func NewGetAuthorizationsIDRequest(server string, authID string, params *GetAuthorizationsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "authID", authID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/authorizations/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchAuthorizationsIDRequest generates requests for PatchAuthorizationsID with JSON body
func NewPatchAuthorizationsIDRequest(server string, authID string, params *PatchAuthorizationsIDParams, body AuthorizationUpdateRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchAuthorizationsIDRequestWithBody(server, authID, params, "application/json", bodyReader)
}

// NewPatchAuthorizationsIDRequestWithBody generates requests for PatchAuthorizationsID with non-JSON body
func NewPatchAuthorizationsIDRequestWithBody(server string, authID string, params *PatchAuthorizationsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "authID", authID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/authorizations/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBucketsRequest generates requests for GetBuckets
func NewGetBucketsRequest(server string, params *GetBucketsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/buckets", server)

	var queryStrings []string

	var queryParam0 string
	if params.Offset != nil {

		queryParam0, err = styleParam("form", true, "offset", *params.Offset)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.Org != nil {

		queryParam2, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.OrgID != nil {

		queryParam3, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	var queryParam4 string
	if params.Name != nil {

		queryParam4, err = styleParam("form", true, "name", *params.Name)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam4)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostBucketsRequest generates requests for PostBuckets with JSON body
func NewPostBucketsRequest(server string, params *PostBucketsParams, body Bucket) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostBucketsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBucketsRequestWithBody generates requests for PostBuckets with non-JSON body
func NewPostBucketsRequestWithBody(server string, params *PostBucketsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/buckets", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteBucketsIDRequest generates requests for DeleteBucketsID
func NewDeleteBucketsIDRequest(server string, bucketID string, params *DeleteBucketsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetBucketsIDRequest generates requests for GetBucketsID
func NewGetBucketsIDRequest(server string, bucketID string, params *GetBucketsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchBucketsIDRequest generates requests for PatchBucketsID with JSON body
func NewPatchBucketsIDRequest(server string, bucketID string, params *PatchBucketsIDParams, body Bucket) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchBucketsIDRequestWithBody(server, bucketID, params, "application/json", bodyReader)
}

// NewPatchBucketsIDRequestWithBody generates requests for PatchBucketsID with non-JSON body
func NewPatchBucketsIDRequestWithBody(server string, bucketID string, params *PatchBucketsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBucketsIDLabelsRequest generates requests for GetBucketsIDLabels
func NewGetBucketsIDLabelsRequest(server string, bucketID string, params *GetBucketsIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostBucketsIDLabelsRequest generates requests for PostBucketsIDLabels with JSON body
func NewPostBucketsIDLabelsRequest(server string, bucketID string, params *PostBucketsIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostBucketsIDLabelsRequestWithBody(server, bucketID, params, "application/json", bodyReader)
}

// NewPostBucketsIDLabelsRequestWithBody generates requests for PostBucketsIDLabels with non-JSON body
func NewPostBucketsIDLabelsRequestWithBody(server string, bucketID string, params *PostBucketsIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteBucketsIDLabelsIDRequest generates requests for DeleteBucketsIDLabelsID
func NewDeleteBucketsIDLabelsIDRequest(server string, bucketID string, labelID string, params *DeleteBucketsIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetBucketsIDLogsRequest generates requests for GetBucketsIDLogs
func NewGetBucketsIDLogsRequest(server string, bucketID string, params *GetBucketsIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/logs", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.Offset != nil {

		queryParam0, err = styleParam("form", true, "offset", *params.Offset)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetBucketsIDMembersRequest generates requests for GetBucketsIDMembers
func NewGetBucketsIDMembersRequest(server string, bucketID string, params *GetBucketsIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostBucketsIDMembersRequest generates requests for PostBucketsIDMembers with JSON body
func NewPostBucketsIDMembersRequest(server string, bucketID string, params *PostBucketsIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostBucketsIDMembersRequestWithBody(server, bucketID, params, "application/json", bodyReader)
}

// NewPostBucketsIDMembersRequestWithBody generates requests for PostBucketsIDMembers with non-JSON body
func NewPostBucketsIDMembersRequestWithBody(server string, bucketID string, params *PostBucketsIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteBucketsIDMembersIDRequest generates requests for DeleteBucketsIDMembersID
func NewDeleteBucketsIDMembersIDRequest(server string, bucketID string, userID string, params *DeleteBucketsIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetBucketsIDOwnersRequest generates requests for GetBucketsIDOwners
func NewGetBucketsIDOwnersRequest(server string, bucketID string, params *GetBucketsIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostBucketsIDOwnersRequest generates requests for PostBucketsIDOwners with JSON body
func NewPostBucketsIDOwnersRequest(server string, bucketID string, params *PostBucketsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostBucketsIDOwnersRequestWithBody(server, bucketID, params, "application/json", bodyReader)
}

// NewPostBucketsIDOwnersRequestWithBody generates requests for PostBucketsIDOwners with non-JSON body
func NewPostBucketsIDOwnersRequestWithBody(server string, bucketID string, params *PostBucketsIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteBucketsIDOwnersIDRequest generates requests for DeleteBucketsIDOwnersID
func NewDeleteBucketsIDOwnersIDRequest(server string, bucketID string, userID string, params *DeleteBucketsIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "bucketID", bucketID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/buckets/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDashboardsRequest generates requests for GetDashboards
func NewGetDashboardsRequest(server string, params *GetDashboardsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/dashboards", server)

	var queryStrings []string

	var queryParam0 string
	if params.Owner != nil {

		queryParam0, err = styleParam("form", true, "owner", *params.Owner)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.SortBy != nil {

		queryParam1, err = styleParam("form", true, "sortBy", *params.SortBy)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.Id != nil {

		queryParam2, err = styleParam("form", true, "id", *params.Id)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.OrgID != nil {

		queryParam3, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	var queryParam4 string
	if params.Org != nil {

		queryParam4, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam4)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDashboardsRequest generates requests for PostDashboards with JSON body
func NewPostDashboardsRequest(server string, params *PostDashboardsParams, body CreateDashboardRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDashboardsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDashboardsRequestWithBody generates requests for PostDashboards with non-JSON body
func NewPostDashboardsRequestWithBody(server string, params *PostDashboardsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/dashboards", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDashboardsIDRequest generates requests for DeleteDashboardsID
func NewDeleteDashboardsIDRequest(server string, dashboardID string, params *DeleteDashboardsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDashboardsIDRequest generates requests for GetDashboardsID
func NewGetDashboardsIDRequest(server string, dashboardID string, params *GetDashboardsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchDashboardsIDRequest generates requests for PatchDashboardsID with JSON body
func NewPatchDashboardsIDRequest(server string, dashboardID string, params *PatchDashboardsIDParams, body struct {
	// Embedded struct due to allOf(#/components/schemas/CreateDashboardRequest)
	CreateDashboardRequest
	// Embedded fields due to inline allOf schema
	Cells  *Cells  `json:"cells,omitempty"`
	Id     *string `json:"id,omitempty"`
	Labels *Labels `json:"labels,omitempty"`
	Links  *struct {
		Cells   *Link `json:"cells,omitempty"`
		Labels  *Link `json:"labels,omitempty"`
		Logs    *Link `json:"logs,omitempty"`
		Members *Link `json:"members,omitempty"`
		Org     *Link `json:"org,omitempty"`
		Owners  *Link `json:"owners,omitempty"`
		Self    *Link `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Meta *struct {
		CreatedAt *time.Time `json:"createdAt,omitempty"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"meta,omitempty"`
}) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchDashboardsIDRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPatchDashboardsIDRequestWithBody generates requests for PatchDashboardsID with non-JSON body
func NewPatchDashboardsIDRequestWithBody(server string, dashboardID string, params *PatchDashboardsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostDashboardsIDCellsRequest generates requests for PostDashboardsIDCells with JSON body
func NewPostDashboardsIDCellsRequest(server string, dashboardID string, params *PostDashboardsIDCellsParams, body CreateCell) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDashboardsIDCellsRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPostDashboardsIDCellsRequestWithBody generates requests for PostDashboardsIDCells with non-JSON body
func NewPostDashboardsIDCellsRequestWithBody(server string, dashboardID string, params *PostDashboardsIDCellsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutDashboardsIDCellsRequest generates requests for PutDashboardsIDCells with JSON body
func NewPutDashboardsIDCellsRequest(server string, dashboardID string, params *PutDashboardsIDCellsParams, body Cells) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutDashboardsIDCellsRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPutDashboardsIDCellsRequestWithBody generates requests for PutDashboardsIDCells with non-JSON body
func NewPutDashboardsIDCellsRequestWithBody(server string, dashboardID string, params *PutDashboardsIDCellsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDashboardsIDCellsIDRequest generates requests for DeleteDashboardsIDCellsID
func NewDeleteDashboardsIDCellsIDRequest(server string, dashboardID string, cellID string, params *DeleteDashboardsIDCellsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "cellID", cellID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchDashboardsIDCellsIDRequest generates requests for PatchDashboardsIDCellsID with JSON body
func NewPatchDashboardsIDCellsIDRequest(server string, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDParams, body CellUpdate) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchDashboardsIDCellsIDRequestWithBody(server, dashboardID, cellID, params, "application/json", bodyReader)
}

// NewPatchDashboardsIDCellsIDRequestWithBody generates requests for PatchDashboardsIDCellsID with non-JSON body
func NewPatchDashboardsIDCellsIDRequestWithBody(server string, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "cellID", cellID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDashboardsIDCellsIDViewRequest generates requests for GetDashboardsIDCellsIDView
func NewGetDashboardsIDCellsIDViewRequest(server string, dashboardID string, cellID string, params *GetDashboardsIDCellsIDViewParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "cellID", cellID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells/%s/view", server, pathParam0, pathParam1)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchDashboardsIDCellsIDViewRequest generates requests for PatchDashboardsIDCellsIDView with JSON body
func NewPatchDashboardsIDCellsIDViewRequest(server string, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDViewParams, body View) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchDashboardsIDCellsIDViewRequestWithBody(server, dashboardID, cellID, params, "application/json", bodyReader)
}

// NewPatchDashboardsIDCellsIDViewRequestWithBody generates requests for PatchDashboardsIDCellsIDView with non-JSON body
func NewPatchDashboardsIDCellsIDViewRequestWithBody(server string, dashboardID string, cellID string, params *PatchDashboardsIDCellsIDViewParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "cellID", cellID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/cells/%s/view", server, pathParam0, pathParam1)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDashboardsIDLabelsRequest generates requests for GetDashboardsIDLabels
func NewGetDashboardsIDLabelsRequest(server string, dashboardID string, params *GetDashboardsIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDashboardsIDLabelsRequest generates requests for PostDashboardsIDLabels with JSON body
func NewPostDashboardsIDLabelsRequest(server string, dashboardID string, params *PostDashboardsIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDashboardsIDLabelsRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPostDashboardsIDLabelsRequestWithBody generates requests for PostDashboardsIDLabels with non-JSON body
func NewPostDashboardsIDLabelsRequestWithBody(server string, dashboardID string, params *PostDashboardsIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDashboardsIDLabelsIDRequest generates requests for DeleteDashboardsIDLabelsID
func NewDeleteDashboardsIDLabelsIDRequest(server string, dashboardID string, labelID string, params *DeleteDashboardsIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDashboardsIDLogsRequest generates requests for GetDashboardsIDLogs
func NewGetDashboardsIDLogsRequest(server string, dashboardID string, params *GetDashboardsIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/logs", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.Offset != nil {

		queryParam0, err = styleParam("form", true, "offset", *params.Offset)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDashboardsIDMembersRequest generates requests for GetDashboardsIDMembers
func NewGetDashboardsIDMembersRequest(server string, dashboardID string, params *GetDashboardsIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDashboardsIDMembersRequest generates requests for PostDashboardsIDMembers with JSON body
func NewPostDashboardsIDMembersRequest(server string, dashboardID string, params *PostDashboardsIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDashboardsIDMembersRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPostDashboardsIDMembersRequestWithBody generates requests for PostDashboardsIDMembers with non-JSON body
func NewPostDashboardsIDMembersRequestWithBody(server string, dashboardID string, params *PostDashboardsIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDashboardsIDMembersIDRequest generates requests for DeleteDashboardsIDMembersID
func NewDeleteDashboardsIDMembersIDRequest(server string, dashboardID string, userID string, params *DeleteDashboardsIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDashboardsIDOwnersRequest generates requests for GetDashboardsIDOwners
func NewGetDashboardsIDOwnersRequest(server string, dashboardID string, params *GetDashboardsIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDashboardsIDOwnersRequest generates requests for PostDashboardsIDOwners with JSON body
func NewPostDashboardsIDOwnersRequest(server string, dashboardID string, params *PostDashboardsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDashboardsIDOwnersRequestWithBody(server, dashboardID, params, "application/json", bodyReader)
}

// NewPostDashboardsIDOwnersRequestWithBody generates requests for PostDashboardsIDOwners with non-JSON body
func NewPostDashboardsIDOwnersRequestWithBody(server string, dashboardID string, params *PostDashboardsIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDashboardsIDOwnersIDRequest generates requests for DeleteDashboardsIDOwnersID
func NewDeleteDashboardsIDOwnersIDRequest(server string, dashboardID string, userID string, params *DeleteDashboardsIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "dashboardID", dashboardID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/dashboards/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDocumentsTemplatesRequest generates requests for GetDocumentsTemplates
func NewGetDocumentsTemplatesRequest(server string, params *GetDocumentsTemplatesParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/documents/templates", server)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.OrgID != nil {

		queryParam1, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDocumentsTemplatesRequest generates requests for PostDocumentsTemplates with JSON body
func NewPostDocumentsTemplatesRequest(server string, params *PostDocumentsTemplatesParams, body DocumentCreate) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDocumentsTemplatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDocumentsTemplatesRequestWithBody generates requests for PostDocumentsTemplates with non-JSON body
func NewPostDocumentsTemplatesRequestWithBody(server string, params *PostDocumentsTemplatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/documents/templates", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDocumentsTemplatesIDRequest generates requests for DeleteDocumentsTemplatesID
func NewDeleteDocumentsTemplatesIDRequest(server string, templateID string, params *DeleteDocumentsTemplatesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetDocumentsTemplatesIDRequest generates requests for GetDocumentsTemplatesID
func NewGetDocumentsTemplatesIDRequest(server string, templateID string, params *GetDocumentsTemplatesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPutDocumentsTemplatesIDRequest generates requests for PutDocumentsTemplatesID with JSON body
func NewPutDocumentsTemplatesIDRequest(server string, templateID string, params *PutDocumentsTemplatesIDParams, body DocumentUpdate) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutDocumentsTemplatesIDRequestWithBody(server, templateID, params, "application/json", bodyReader)
}

// NewPutDocumentsTemplatesIDRequestWithBody generates requests for PutDocumentsTemplatesID with non-JSON body
func NewPutDocumentsTemplatesIDRequestWithBody(server string, templateID string, params *PutDocumentsTemplatesIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDocumentsTemplatesIDLabelsRequest generates requests for GetDocumentsTemplatesIDLabels
func NewGetDocumentsTemplatesIDLabelsRequest(server string, templateID string, params *GetDocumentsTemplatesIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostDocumentsTemplatesIDLabelsRequest generates requests for PostDocumentsTemplatesIDLabels with JSON body
func NewPostDocumentsTemplatesIDLabelsRequest(server string, templateID string, params *PostDocumentsTemplatesIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostDocumentsTemplatesIDLabelsRequestWithBody(server, templateID, params, "application/json", bodyReader)
}

// NewPostDocumentsTemplatesIDLabelsRequestWithBody generates requests for PostDocumentsTemplatesIDLabels with non-JSON body
func NewPostDocumentsTemplatesIDLabelsRequestWithBody(server string, templateID string, params *PostDocumentsTemplatesIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDocumentsTemplatesIDLabelsIDRequest generates requests for DeleteDocumentsTemplatesIDLabelsID
func NewDeleteDocumentsTemplatesIDLabelsIDRequest(server string, templateID string, labelID string, params *DeleteDocumentsTemplatesIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "templateID", templateID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/documents/templates/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string, params *GetHealthParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/health", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetLabelsRequest generates requests for GetLabels
func NewGetLabelsRequest(server string, params *GetLabelsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/labels", server)

	var queryStrings []string

	var queryParam0 string
	if params.OrgID != nil {

		queryParam0, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostLabelsRequest generates requests for PostLabels with JSON body
func NewPostLabelsRequest(server string, body LabelCreateRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostLabelsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLabelsRequestWithBody generates requests for PostLabels with non-JSON body
func NewPostLabelsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/labels", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteLabelsIDRequest generates requests for DeleteLabelsID
func NewDeleteLabelsIDRequest(server string, labelID string, params *DeleteLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/labels/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetLabelsIDRequest generates requests for GetLabelsID
func NewGetLabelsIDRequest(server string, labelID string, params *GetLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/labels/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchLabelsIDRequest generates requests for PatchLabelsID with JSON body
func NewPatchLabelsIDRequest(server string, labelID string, params *PatchLabelsIDParams, body LabelUpdate) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchLabelsIDRequestWithBody(server, labelID, params, "application/json", bodyReader)
}

// NewPatchLabelsIDRequestWithBody generates requests for PatchLabelsID with non-JSON body
func NewPatchLabelsIDRequestWithBody(server string, labelID string, params *PatchLabelsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/labels/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string, params *GetMeParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/me", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPutMePasswordRequest generates requests for PutMePassword with JSON body
func NewPutMePasswordRequest(server string, params *PutMePasswordParams, body PasswordResetBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutMePasswordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutMePasswordRequestWithBody generates requests for PutMePassword with non-JSON body
func NewPutMePasswordRequestWithBody(server string, params *PutMePasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/me/password", server)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetOrgsRequest generates requests for GetOrgs
func NewGetOrgsRequest(server string, params *GetOrgsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/orgs", server)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.OrgID != nil {

		queryParam1, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostOrgsRequest generates requests for PostOrgs with JSON body
func NewPostOrgsRequest(server string, params *PostOrgsParams, body Organization) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostOrgsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostOrgsRequestWithBody generates requests for PostOrgs with non-JSON body
func NewPostOrgsRequestWithBody(server string, params *PostOrgsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/orgs", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteOrgsIDRequest generates requests for DeleteOrgsID
func NewDeleteOrgsIDRequest(server string, orgID string, params *DeleteOrgsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetOrgsIDRequest generates requests for GetOrgsID
func NewGetOrgsIDRequest(server string, orgID string, params *GetOrgsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchOrgsIDRequest generates requests for PatchOrgsID with JSON body
func NewPatchOrgsIDRequest(server string, orgID string, params *PatchOrgsIDParams, body Organization) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchOrgsIDRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPatchOrgsIDRequestWithBody generates requests for PatchOrgsID with non-JSON body
func NewPatchOrgsIDRequestWithBody(server string, orgID string, params *PatchOrgsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetOrgsIDLabelsRequest generates requests for GetOrgsIDLabels
func NewGetOrgsIDLabelsRequest(server string, orgID string, params *GetOrgsIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostOrgsIDLabelsRequest generates requests for PostOrgsIDLabels with JSON body
func NewPostOrgsIDLabelsRequest(server string, orgID string, params *PostOrgsIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostOrgsIDLabelsRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPostOrgsIDLabelsRequestWithBody generates requests for PostOrgsIDLabels with non-JSON body
func NewPostOrgsIDLabelsRequestWithBody(server string, orgID string, params *PostOrgsIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteOrgsIDLabelsIDRequest generates requests for DeleteOrgsIDLabelsID
func NewDeleteOrgsIDLabelsIDRequest(server string, orgID string, labelID string, params *DeleteOrgsIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetOrgsIDLogsRequest generates requests for GetOrgsIDLogs
func NewGetOrgsIDLogsRequest(server string, orgID string, params *GetOrgsIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/logs", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.Offset != nil {

		queryParam0, err = styleParam("form", true, "offset", *params.Offset)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetOrgsIDMembersRequest generates requests for GetOrgsIDMembers
func NewGetOrgsIDMembersRequest(server string, orgID string, params *GetOrgsIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostOrgsIDMembersRequest generates requests for PostOrgsIDMembers with JSON body
func NewPostOrgsIDMembersRequest(server string, orgID string, params *PostOrgsIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostOrgsIDMembersRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPostOrgsIDMembersRequestWithBody generates requests for PostOrgsIDMembers with non-JSON body
func NewPostOrgsIDMembersRequestWithBody(server string, orgID string, params *PostOrgsIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteOrgsIDMembersIDRequest generates requests for DeleteOrgsIDMembersID
func NewDeleteOrgsIDMembersIDRequest(server string, orgID string, userID string, params *DeleteOrgsIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetOrgsIDOwnersRequest generates requests for GetOrgsIDOwners
func NewGetOrgsIDOwnersRequest(server string, orgID string, params *GetOrgsIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostOrgsIDOwnersRequest generates requests for PostOrgsIDOwners with JSON body
func NewPostOrgsIDOwnersRequest(server string, orgID string, params *PostOrgsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostOrgsIDOwnersRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPostOrgsIDOwnersRequestWithBody generates requests for PostOrgsIDOwners with non-JSON body
func NewPostOrgsIDOwnersRequestWithBody(server string, orgID string, params *PostOrgsIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteOrgsIDOwnersIDRequest generates requests for DeleteOrgsIDOwnersID
func NewDeleteOrgsIDOwnersIDRequest(server string, orgID string, userID string, params *DeleteOrgsIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetOrgsIDSecretsRequest generates requests for GetOrgsIDSecrets
func NewGetOrgsIDSecretsRequest(server string, orgID string, params *GetOrgsIDSecretsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/secrets", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchOrgsIDSecretsRequest generates requests for PatchOrgsIDSecrets with JSON body
func NewPatchOrgsIDSecretsRequest(server string, orgID string, params *PatchOrgsIDSecretsParams, body Secrets) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchOrgsIDSecretsRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPatchOrgsIDSecretsRequestWithBody generates requests for PatchOrgsIDSecrets with non-JSON body
func NewPatchOrgsIDSecretsRequestWithBody(server string, orgID string, params *PatchOrgsIDSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/secrets", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostOrgsIDSecretsRequest generates requests for PostOrgsIDSecrets with JSON body
func NewPostOrgsIDSecretsRequest(server string, orgID string, params *PostOrgsIDSecretsParams, body SecretKeys) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostOrgsIDSecretsRequestWithBody(server, orgID, params, "application/json", bodyReader)
}

// NewPostOrgsIDSecretsRequestWithBody generates requests for PostOrgsIDSecrets with non-JSON body
func NewPostOrgsIDSecretsRequestWithBody(server string, orgID string, params *PostOrgsIDSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "orgID", orgID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/orgs/%s/secrets/delete", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostQueryRequest generates requests for PostQuery with JSON body
func NewPostQueryRequest(server string, params *PostQueryParams, body *Query) (*http.Request, error) {
	var bodyReader io.Reader
	if body != nil {
		buf, err := json.Marshal(body)
		if err != nil {
			return nil, err
		}
		bodyReader = bytes.NewReader(buf)
	}
	return NewPostQueryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostQueryRequestWithBody generates requests for PostQuery with non-JSON body
func NewPostQueryRequestWithBody(server string, params *PostQueryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/query", server)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.OrgID != nil {

		queryParam1, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	if params.ContentType != nil {
		var headerParam1 string

		headerParam1, err = styleParam("simple", false, "Content-Type", *params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Type", headerParam1)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostQueryAnalyzeRequest generates requests for PostQueryAnalyze with JSON body
func NewPostQueryAnalyzeRequest(server string, params *PostQueryAnalyzeParams, body *Query) (*http.Request, error) {
	var bodyReader io.Reader
	if body != nil {
		buf, err := json.Marshal(body)
		if err != nil {
			return nil, err
		}
		bodyReader = bytes.NewReader(buf)
	}
	return NewPostQueryAnalyzeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostQueryAnalyzeRequestWithBody generates requests for PostQueryAnalyze with non-JSON body
func NewPostQueryAnalyzeRequestWithBody(server string, params *PostQueryAnalyzeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/query/analyze", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	if params.ContentType != nil {
		var headerParam1 string

		headerParam1, err = styleParam("simple", false, "Content-Type", *params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Type", headerParam1)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostQueryAstRequest generates requests for PostQueryAst with JSON body
func NewPostQueryAstRequest(server string, params *PostQueryAstParams, body *LanguageRequest) (*http.Request, error) {
	var bodyReader io.Reader
	if body != nil {
		buf, err := json.Marshal(body)
		if err != nil {
			return nil, err
		}
		bodyReader = bytes.NewReader(buf)
	}
	return NewPostQueryAstRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostQueryAstRequestWithBody generates requests for PostQueryAst with non-JSON body
func NewPostQueryAstRequestWithBody(server string, params *PostQueryAstParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/query/ast", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	if params.ContentType != nil {
		var headerParam1 string

		headerParam1, err = styleParam("simple", false, "Content-Type", *params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Type", headerParam1)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetQuerySuggestionsRequest generates requests for GetQuerySuggestions
func NewGetQuerySuggestionsRequest(server string, params *GetQuerySuggestionsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/query/suggestions", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetQuerySuggestionsNameRequest generates requests for GetQuerySuggestionsName
func NewGetQuerySuggestionsNameRequest(server string, name string, params *GetQuerySuggestionsNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/query/suggestions/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetReadyRequest generates requests for GetReady
func NewGetReadyRequest(server string, params *GetReadyParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/ready", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetScrapersRequest generates requests for GetScrapers
func NewGetScrapersRequest(server string, params *GetScrapersParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/scrapers", server)

	var queryStrings []string

	var queryParam0 string
	if params.Name != nil {

		queryParam0, err = styleParam("form", true, "name", *params.Name)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Id != nil {

		queryParam1, err = styleParam("form", true, "id", *params.Id)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.OrgID != nil {

		queryParam2, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.Org != nil {

		queryParam3, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostScrapersRequest generates requests for PostScrapers with JSON body
func NewPostScrapersRequest(server string, params *PostScrapersParams, body ScraperTargetRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostScrapersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostScrapersRequestWithBody generates requests for PostScrapers with non-JSON body
func NewPostScrapersRequestWithBody(server string, params *PostScrapersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/scrapers", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteScrapersIDRequest generates requests for DeleteScrapersID
func NewDeleteScrapersIDRequest(server string, scraperTargetID string, params *DeleteScrapersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetScrapersIDRequest generates requests for GetScrapersID
func NewGetScrapersIDRequest(server string, scraperTargetID string, params *GetScrapersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchScrapersIDRequest generates requests for PatchScrapersID with JSON body
func NewPatchScrapersIDRequest(server string, scraperTargetID string, params *PatchScrapersIDParams, body ScraperTargetRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchScrapersIDRequestWithBody(server, scraperTargetID, params, "application/json", bodyReader)
}

// NewPatchScrapersIDRequestWithBody generates requests for PatchScrapersID with non-JSON body
func NewPatchScrapersIDRequestWithBody(server string, scraperTargetID string, params *PatchScrapersIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetScrapersIDLabelsRequest generates requests for GetScrapersIDLabels
func NewGetScrapersIDLabelsRequest(server string, scraperTargetID string, params *GetScrapersIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostScrapersIDLabelsRequest generates requests for PostScrapersIDLabels with JSON body
func NewPostScrapersIDLabelsRequest(server string, scraperTargetID string, params *PostScrapersIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostScrapersIDLabelsRequestWithBody(server, scraperTargetID, params, "application/json", bodyReader)
}

// NewPostScrapersIDLabelsRequestWithBody generates requests for PostScrapersIDLabels with non-JSON body
func NewPostScrapersIDLabelsRequestWithBody(server string, scraperTargetID string, params *PostScrapersIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteScrapersIDLabelsIDRequest generates requests for DeleteScrapersIDLabelsID
func NewDeleteScrapersIDLabelsIDRequest(server string, scraperTargetID string, labelID string, params *DeleteScrapersIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchScrapersIDLabelsIDRequest generates requests for PatchScrapersIDLabelsID with JSON body
func NewPatchScrapersIDLabelsIDRequest(server string, scraperTargetID string, labelID string, params *PatchScrapersIDLabelsIDParams, body Label) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchScrapersIDLabelsIDRequestWithBody(server, scraperTargetID, labelID, params, "application/json", bodyReader)
}

// NewPatchScrapersIDLabelsIDRequestWithBody generates requests for PatchScrapersIDLabelsID with non-JSON body
func NewPatchScrapersIDLabelsIDRequestWithBody(server string, scraperTargetID string, labelID string, params *PatchScrapersIDLabelsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetScrapersIDMembersRequest generates requests for GetScrapersIDMembers
func NewGetScrapersIDMembersRequest(server string, scraperTargetID string, params *GetScrapersIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostScrapersIDMembersRequest generates requests for PostScrapersIDMembers with JSON body
func NewPostScrapersIDMembersRequest(server string, scraperTargetID string, params *PostScrapersIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostScrapersIDMembersRequestWithBody(server, scraperTargetID, params, "application/json", bodyReader)
}

// NewPostScrapersIDMembersRequestWithBody generates requests for PostScrapersIDMembers with non-JSON body
func NewPostScrapersIDMembersRequestWithBody(server string, scraperTargetID string, params *PostScrapersIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteScrapersIDMembersIDRequest generates requests for DeleteScrapersIDMembersID
func NewDeleteScrapersIDMembersIDRequest(server string, scraperTargetID string, userID string, params *DeleteScrapersIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetScrapersIDOwnersRequest generates requests for GetScrapersIDOwners
func NewGetScrapersIDOwnersRequest(server string, scraperTargetID string, params *GetScrapersIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostScrapersIDOwnersRequest generates requests for PostScrapersIDOwners with JSON body
func NewPostScrapersIDOwnersRequest(server string, scraperTargetID string, params *PostScrapersIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostScrapersIDOwnersRequestWithBody(server, scraperTargetID, params, "application/json", bodyReader)
}

// NewPostScrapersIDOwnersRequestWithBody generates requests for PostScrapersIDOwners with non-JSON body
func NewPostScrapersIDOwnersRequestWithBody(server string, scraperTargetID string, params *PostScrapersIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteScrapersIDOwnersIDRequest generates requests for DeleteScrapersIDOwnersID
func NewDeleteScrapersIDOwnersIDRequest(server string, scraperTargetID string, userID string, params *DeleteScrapersIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "scraperTargetID", scraperTargetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/scrapers/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetSetupRequest generates requests for GetSetup
func NewGetSetupRequest(server string, params *GetSetupParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/setup", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostSetupRequest generates requests for PostSetup with JSON body
func NewPostSetupRequest(server string, params *PostSetupParams, body OnboardingRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostSetupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSetupRequestWithBody generates requests for PostSetup with non-JSON body
func NewPostSetupRequestWithBody(server string, params *PostSetupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/setup", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostSigninRequest generates requests for PostSignin
func NewPostSigninRequest(server string, params *PostSigninParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/signin", server)

	req, err := http.NewRequest("POST", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostSignoutRequest generates requests for PostSignout
func NewPostSignoutRequest(server string, params *PostSignoutParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/signout", server)

	req, err := http.NewRequest("POST", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetSourcesRequest generates requests for GetSources
func NewGetSourcesRequest(server string, params *GetSourcesParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/sources", server)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostSourcesRequest generates requests for PostSources with JSON body
func NewPostSourcesRequest(server string, params *PostSourcesParams, body Source) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostSourcesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSourcesRequestWithBody generates requests for PostSources with non-JSON body
func NewPostSourcesRequestWithBody(server string, params *PostSourcesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/sources", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteSourcesIDRequest generates requests for DeleteSourcesID
func NewDeleteSourcesIDRequest(server string, sourceID string, params *DeleteSourcesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "sourceID", sourceID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/sources/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetSourcesIDRequest generates requests for GetSourcesID
func NewGetSourcesIDRequest(server string, sourceID string, params *GetSourcesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "sourceID", sourceID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/sources/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchSourcesIDRequest generates requests for PatchSourcesID with JSON body
func NewPatchSourcesIDRequest(server string, sourceID string, params *PatchSourcesIDParams, body Source) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchSourcesIDRequestWithBody(server, sourceID, params, "application/json", bodyReader)
}

// NewPatchSourcesIDRequestWithBody generates requests for PatchSourcesID with non-JSON body
func NewPatchSourcesIDRequestWithBody(server string, sourceID string, params *PatchSourcesIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "sourceID", sourceID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/sources/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSourcesIDBucketsRequest generates requests for GetSourcesIDBuckets
func NewGetSourcesIDBucketsRequest(server string, sourceID string, params *GetSourcesIDBucketsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "sourceID", sourceID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/sources/%s/buckets", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetSourcesIDHealthRequest generates requests for GetSourcesIDHealth
func NewGetSourcesIDHealthRequest(server string, sourceID string, params *GetSourcesIDHealthParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "sourceID", sourceID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/sources/%s/health", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, params *GetTasksParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/tasks", server)

	var queryStrings []string

	var queryParam0 string
	if params.After != nil {

		queryParam0, err = styleParam("form", true, "after", *params.After)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.User != nil {

		queryParam1, err = styleParam("form", true, "user", *params.User)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.Org != nil {

		queryParam2, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.OrgID != nil {

		queryParam3, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	var queryParam4 string
	if params.Limit != nil {

		queryParam4, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam4)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksRequest generates requests for PostTasks with JSON body
func NewPostTasksRequest(server string, params *PostTasksParams, body TaskCreateRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTasksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTasksRequestWithBody generates requests for PostTasks with non-JSON body
func NewPostTasksRequestWithBody(server string, params *PostTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/tasks", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTasksIDRequest generates requests for DeleteTasksID
func NewDeleteTasksIDRequest(server string, taskID string, params *DeleteTasksIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDRequest generates requests for GetTasksID
func NewGetTasksIDRequest(server string, taskID string, params *GetTasksIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchTasksIDRequest generates requests for PatchTasksID with JSON body
func NewPatchTasksIDRequest(server string, taskID string, params *PatchTasksIDParams, body TaskUpdateRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchTasksIDRequestWithBody(server, taskID, params, "application/json", bodyReader)
}

// NewPatchTasksIDRequestWithBody generates requests for PatchTasksID with non-JSON body
func NewPatchTasksIDRequestWithBody(server string, taskID string, params *PatchTasksIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTasksIDLabelsRequest generates requests for GetTasksIDLabels
func NewGetTasksIDLabelsRequest(server string, taskID string, params *GetTasksIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksIDLabelsRequest generates requests for PostTasksIDLabels with JSON body
func NewPostTasksIDLabelsRequest(server string, taskID string, params *PostTasksIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTasksIDLabelsRequestWithBody(server, taskID, params, "application/json", bodyReader)
}

// NewPostTasksIDLabelsRequestWithBody generates requests for PostTasksIDLabels with non-JSON body
func NewPostTasksIDLabelsRequestWithBody(server string, taskID string, params *PostTasksIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTasksIDLabelsIDRequest generates requests for DeleteTasksIDLabelsID
func NewDeleteTasksIDLabelsIDRequest(server string, taskID string, labelID string, params *DeleteTasksIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDLogsRequest generates requests for GetTasksIDLogs
func NewGetTasksIDLogsRequest(server string, taskID string, params *GetTasksIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/logs", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDMembersRequest generates requests for GetTasksIDMembers
func NewGetTasksIDMembersRequest(server string, taskID string, params *GetTasksIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksIDMembersRequest generates requests for PostTasksIDMembers with JSON body
func NewPostTasksIDMembersRequest(server string, taskID string, params *PostTasksIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTasksIDMembersRequestWithBody(server, taskID, params, "application/json", bodyReader)
}

// NewPostTasksIDMembersRequestWithBody generates requests for PostTasksIDMembers with non-JSON body
func NewPostTasksIDMembersRequestWithBody(server string, taskID string, params *PostTasksIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTasksIDMembersIDRequest generates requests for DeleteTasksIDMembersID
func NewDeleteTasksIDMembersIDRequest(server string, taskID string, userID string, params *DeleteTasksIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDOwnersRequest generates requests for GetTasksIDOwners
func NewGetTasksIDOwnersRequest(server string, taskID string, params *GetTasksIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksIDOwnersRequest generates requests for PostTasksIDOwners with JSON body
func NewPostTasksIDOwnersRequest(server string, taskID string, params *PostTasksIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTasksIDOwnersRequestWithBody(server, taskID, params, "application/json", bodyReader)
}

// NewPostTasksIDOwnersRequestWithBody generates requests for PostTasksIDOwners with non-JSON body
func NewPostTasksIDOwnersRequestWithBody(server string, taskID string, params *PostTasksIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTasksIDOwnersIDRequest generates requests for DeleteTasksIDOwnersID
func NewDeleteTasksIDOwnersIDRequest(server string, taskID string, userID string, params *DeleteTasksIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDRunsRequest generates requests for GetTasksIDRuns
func NewGetTasksIDRunsRequest(server string, taskID string, params *GetTasksIDRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/runs", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.After != nil {

		queryParam0, err = styleParam("form", true, "after", *params.After)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.AfterTime != nil {

		queryParam2, err = styleParam("form", true, "afterTime", *params.AfterTime)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	var queryParam3 string
	if params.BeforeTime != nil {

		queryParam3, err = styleParam("form", true, "beforeTime", *params.BeforeTime)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam3)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksIDRunsRequest generates requests for PostTasksIDRuns with JSON body
func NewPostTasksIDRunsRequest(server string, taskID string, params *PostTasksIDRunsParams, body *RunManually) (*http.Request, error) {
	var bodyReader io.Reader
	if body != nil {
		buf, err := json.Marshal(body)
		if err != nil {
			return nil, err
		}
		bodyReader = bytes.NewReader(buf)
	}
	return NewPostTasksIDRunsRequestWithBody(server, taskID, params, "application/json", bodyReader)
}

// NewPostTasksIDRunsRequestWithBody generates requests for PostTasksIDRuns with non-JSON body
func NewPostTasksIDRunsRequestWithBody(server string, taskID string, params *PostTasksIDRunsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/runs", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTasksIDRunsIDRequest generates requests for GetTasksIDRunsID
func NewGetTasksIDRunsIDRequest(server string, taskID string, runID string, params *GetTasksIDRunsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "runID", runID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/runs/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTasksIDRunsIDLogsRequest generates requests for GetTasksIDRunsIDLogs
func NewGetTasksIDRunsIDLogsRequest(server string, taskID string, runID string, params *GetTasksIDRunsIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "runID", runID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/runs/%s/logs", server, pathParam0, pathParam1)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTasksIDRunsIDRetryRequest generates requests for PostTasksIDRunsIDRetry
func NewPostTasksIDRunsIDRetryRequest(server string, taskID string, runID string, params *PostTasksIDRunsIDRetryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "taskID", taskID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "runID", runID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/tasks/%s/runs/%s/retry", server, pathParam0, pathParam1)

	req, err := http.NewRequest("POST", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTelegrafsRequest generates requests for GetTelegrafs
func NewGetTelegrafsRequest(server string, params *GetTelegrafsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/telegrafs", server)

	var queryStrings []string

	var queryParam0 string
	if params.OrgID != nil {

		queryParam0, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTelegrafsRequest generates requests for PostTelegrafs with JSON body
func NewPostTelegrafsRequest(server string, params *PostTelegrafsParams, body TelegrafRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTelegrafsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTelegrafsRequestWithBody generates requests for PostTelegrafs with non-JSON body
func NewPostTelegrafsRequestWithBody(server string, params *PostTelegrafsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/telegrafs", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTelegrafsIDRequest generates requests for DeleteTelegrafsID
func NewDeleteTelegrafsIDRequest(server string, telegrafID string, params *DeleteTelegrafsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTelegrafsIDRequest generates requests for GetTelegrafsID
func NewGetTelegrafsIDRequest(server string, telegrafID string, params *GetTelegrafsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	if params.Accept != nil {
		var headerParam1 string

		headerParam1, err = styleParam("simple", false, "Accept", *params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Accept", headerParam1)
	}

	return req, nil
}

// NewPutTelegrafsIDRequest generates requests for PutTelegrafsID with JSON body
func NewPutTelegrafsIDRequest(server string, telegrafID string, params *PutTelegrafsIDParams, body TelegrafRequest) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutTelegrafsIDRequestWithBody(server, telegrafID, params, "application/json", bodyReader)
}

// NewPutTelegrafsIDRequestWithBody generates requests for PutTelegrafsID with non-JSON body
func NewPutTelegrafsIDRequestWithBody(server string, telegrafID string, params *PutTelegrafsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTelegrafsIDLabelsRequest generates requests for GetTelegrafsIDLabels
func NewGetTelegrafsIDLabelsRequest(server string, telegrafID string, params *GetTelegrafsIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTelegrafsIDLabelsRequest generates requests for PostTelegrafsIDLabels with JSON body
func NewPostTelegrafsIDLabelsRequest(server string, telegrafID string, params *PostTelegrafsIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTelegrafsIDLabelsRequestWithBody(server, telegrafID, params, "application/json", bodyReader)
}

// NewPostTelegrafsIDLabelsRequestWithBody generates requests for PostTelegrafsIDLabels with non-JSON body
func NewPostTelegrafsIDLabelsRequestWithBody(server string, telegrafID string, params *PostTelegrafsIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTelegrafsIDLabelsIDRequest generates requests for DeleteTelegrafsIDLabelsID
func NewDeleteTelegrafsIDLabelsIDRequest(server string, telegrafID string, labelID string, params *DeleteTelegrafsIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTelegrafsIDMembersRequest generates requests for GetTelegrafsIDMembers
func NewGetTelegrafsIDMembersRequest(server string, telegrafID string, params *GetTelegrafsIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/members", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTelegrafsIDMembersRequest generates requests for PostTelegrafsIDMembers with JSON body
func NewPostTelegrafsIDMembersRequest(server string, telegrafID string, params *PostTelegrafsIDMembersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTelegrafsIDMembersRequestWithBody(server, telegrafID, params, "application/json", bodyReader)
}

// NewPostTelegrafsIDMembersRequestWithBody generates requests for PostTelegrafsIDMembers with non-JSON body
func NewPostTelegrafsIDMembersRequestWithBody(server string, telegrafID string, params *PostTelegrafsIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/members", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTelegrafsIDMembersIDRequest generates requests for DeleteTelegrafsIDMembersID
func NewDeleteTelegrafsIDMembersIDRequest(server string, telegrafID string, userID string, params *DeleteTelegrafsIDMembersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/members/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetTelegrafsIDOwnersRequest generates requests for GetTelegrafsIDOwners
func NewGetTelegrafsIDOwnersRequest(server string, telegrafID string, params *GetTelegrafsIDOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/owners", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostTelegrafsIDOwnersRequest generates requests for PostTelegrafsIDOwners with JSON body
func NewPostTelegrafsIDOwnersRequest(server string, telegrafID string, params *PostTelegrafsIDOwnersParams, body AddResourceMemberRequestBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostTelegrafsIDOwnersRequestWithBody(server, telegrafID, params, "application/json", bodyReader)
}

// NewPostTelegrafsIDOwnersRequestWithBody generates requests for PostTelegrafsIDOwners with non-JSON body
func NewPostTelegrafsIDOwnersRequestWithBody(server string, telegrafID string, params *PostTelegrafsIDOwnersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/owners", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteTelegrafsIDOwnersIDRequest generates requests for DeleteTelegrafsIDOwnersID
func NewDeleteTelegrafsIDOwnersIDRequest(server string, telegrafID string, userID string, params *DeleteTelegrafsIDOwnersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "telegrafID", telegrafID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/telegrafs/%s/owners/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/users", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostUsersRequest generates requests for PostUsers with JSON body
func NewPostUsersRequest(server string, params *PostUsersParams, body User) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with non-JSON body
func NewPostUsersRequestWithBody(server string, params *PostUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/users", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteUsersIDRequest generates requests for DeleteUsersID
func NewDeleteUsersIDRequest(server string, userID string, params *DeleteUsersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/users/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetUsersIDRequest generates requests for GetUsersID
func NewGetUsersIDRequest(server string, userID string, params *GetUsersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/users/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchUsersIDRequest generates requests for PatchUsersID with JSON body
func NewPatchUsersIDRequest(server string, userID string, params *PatchUsersIDParams, body User) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchUsersIDRequestWithBody(server, userID, params, "application/json", bodyReader)
}

// NewPatchUsersIDRequestWithBody generates requests for PatchUsersID with non-JSON body
func NewPatchUsersIDRequestWithBody(server string, userID string, params *PatchUsersIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/users/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUsersIDLogsRequest generates requests for GetUsersIDLogs
func NewGetUsersIDLogsRequest(server string, userID string, params *GetUsersIDLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/users/%s/logs", server, pathParam0)

	var queryStrings []string

	var queryParam0 string
	if params.Offset != nil {

		queryParam0, err = styleParam("form", true, "offset", *params.Offset)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Limit != nil {

		queryParam1, err = styleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPutUsersIDPasswordRequest generates requests for PutUsersIDPassword with JSON body
func NewPutUsersIDPasswordRequest(server string, userID string, params *PutUsersIDPasswordParams, body PasswordResetBody) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutUsersIDPasswordRequestWithBody(server, userID, params, "application/json", bodyReader)
}

// NewPutUsersIDPasswordRequestWithBody generates requests for PutUsersIDPassword with non-JSON body
func NewPutUsersIDPasswordRequestWithBody(server string, userID string, params *PutUsersIDPasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "userID", userID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/users/%s/password", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVariablesRequest generates requests for GetVariables
func NewGetVariablesRequest(server string, params *GetVariablesParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/variables", server)

	var queryStrings []string

	var queryParam0 string
	if params.Org != nil {

		queryParam0, err = styleParam("form", true, "org", *params.Org)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.OrgID != nil {

		queryParam1, err = styleParam("form", true, "orgID", *params.OrgID)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostVariablesRequest generates requests for PostVariables with JSON body
func NewPostVariablesRequest(server string, params *PostVariablesParams, body Variable) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostVariablesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostVariablesRequestWithBody generates requests for PostVariables with non-JSON body
func NewPostVariablesRequestWithBody(server string, params *PostVariablesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/variables", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteVariablesIDRequest generates requests for DeleteVariablesID
func NewDeleteVariablesIDRequest(server string, variableID string, params *DeleteVariablesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewGetVariablesIDRequest generates requests for GetVariablesID
func NewGetVariablesIDRequest(server string, variableID string, params *GetVariablesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPatchVariablesIDRequest generates requests for PatchVariablesID with JSON body
func NewPatchVariablesIDRequest(server string, variableID string, params *PatchVariablesIDParams, body Variable) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPatchVariablesIDRequestWithBody(server, variableID, params, "application/json", bodyReader)
}

// NewPatchVariablesIDRequestWithBody generates requests for PatchVariablesID with non-JSON body
func NewPatchVariablesIDRequestWithBody(server string, variableID string, params *PatchVariablesIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s", server, pathParam0)

	req, err := http.NewRequest("PATCH", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPutVariablesIDRequest generates requests for PutVariablesID with JSON body
func NewPutVariablesIDRequest(server string, variableID string, params *PutVariablesIDParams, body Variable) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPutVariablesIDRequestWithBody(server, variableID, params, "application/json", bodyReader)
}

// NewPutVariablesIDRequestWithBody generates requests for PutVariablesID with non-JSON body
func NewPutVariablesIDRequestWithBody(server string, variableID string, params *PutVariablesIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s", server, pathParam0)

	req, err := http.NewRequest("PUT", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVariablesIDLabelsRequest generates requests for GetVariablesIDLabels
func NewGetVariablesIDLabelsRequest(server string, variableID string, params *GetVariablesIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s/labels", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostVariablesIDLabelsRequest generates requests for PostVariablesIDLabels with JSON body
func NewPostVariablesIDLabelsRequest(server string, variableID string, params *PostVariablesIDLabelsParams, body LabelMapping) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewPostVariablesIDLabelsRequestWithBody(server, variableID, params, "application/json", bodyReader)
}

// NewPostVariablesIDLabelsRequestWithBody generates requests for PostVariablesIDLabels with non-JSON body
func NewPostVariablesIDLabelsRequestWithBody(server string, variableID string, params *PostVariablesIDLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s/labels", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteVariablesIDLabelsIDRequest generates requests for DeleteVariablesIDLabelsID
func NewDeleteVariablesIDLabelsIDRequest(server string, variableID string, labelID string, params *DeleteVariablesIDLabelsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = styleParam("simple", false, "variableID", variableID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = styleParam("simple", false, "labelID", labelID)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/variables/%s/labels/%s", server, pathParam0, pathParam1)

	req, err := http.NewRequest("DELETE", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	return req, nil
}

// NewPostWriteRequestWithBody generates requests for PostWrite with non-JSON body
func NewPostWriteRequestWithBody(server string, params *PostWriteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/write", server)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = styleParam("form", true, "org", params.Org)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	var queryParam1 string

	queryParam1, err = styleParam("form", true, "bucket", params.Bucket)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam1)

	var queryParam2 string
	if params.Precision != nil {

		queryParam2, err = styleParam("form", true, "precision", *params.Precision)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	if params.ZapTraceSpan != nil {
		var headerParam0 string

		headerParam0, err = styleParam("simple", false, "Zap-Trace-Span", *params.ZapTraceSpan)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Zap-Trace-Span", headerParam0)
	}

	if params.ContentEncoding != nil {
		var headerParam1 string

		headerParam1, err = styleParam("simple", false, "Content-Encoding", *params.ContentEncoding)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Encoding", headerParam1)
	}

	if params.ContentType != nil {
		var headerParam2 string

		headerParam2, err = styleParam("simple", false, "Content-Type", *params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Type", headerParam2)
	}

	if params.ContentLength != nil {
		var headerParam3 string

		headerParam3, err = styleParam("simple", false, "Content-Length", *params.ContentLength)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Content-Length", headerParam3)
	}

	if params.Accept != nil {
		var headerParam4 string

		headerParam4, err = styleParam("simple", false, "Accept", *params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Add("Accept", headerParam4)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}
